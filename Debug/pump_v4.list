
pump_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800375c  0800375c  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  0800375c  0800375c  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800375c  0800375c  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000108  0800386c  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800386c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc4  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001940  00000000  00000000  00028cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002adb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb5  00000000  00000000  0002b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009415  00000000  00000000  0004544d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995ab  00000000  00000000  0004e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7e0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  000e7e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800370c 	.word	0x0800370c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	0800370c 	.word	0x0800370c

080001c8 <READ_HOLDING_REG>:
int8_t write_reg_map[249]={-1};
uint8_t error_map[2]={0};
int status = 0;

int READ_HOLDING_REG(uint8_t Add_HI,uint8_t Add_LO,uint8_t Num_reg_HI,uint8_t Num_reg_LO)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4604      	mov	r4, r0
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4623      	mov	r3, r4
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	4603      	mov	r3, r0
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	460b      	mov	r3, r1
 80001e0:	717b      	strb	r3, [r7, #5]
 80001e2:	4613      	mov	r3, r2
 80001e4:	713b      	strb	r3, [r7, #4]
	uint8_t buff[6] = {SLAVE_ADD,0x03,Add_HI,Add_LO,Num_reg_HI,Num_reg_LO};
 80001e6:	2301      	movs	r3, #1
 80001e8:	723b      	strb	r3, [r7, #8]
 80001ea:	2303      	movs	r3, #3
 80001ec:	727b      	strb	r3, [r7, #9]
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	72bb      	strb	r3, [r7, #10]
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	72fb      	strb	r3, [r7, #11]
 80001f6:	797b      	ldrb	r3, [r7, #5]
 80001f8:	733b      	strb	r3, [r7, #12]
 80001fa:	793b      	ldrb	r3, [r7, #4]
 80001fc:	737b      	strb	r3, [r7, #13]
	uint16_t N={Num_reg_HI||Num_reg_LO};
 80001fe:	797b      	ldrb	r3, [r7, #5]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d102      	bne.n	800020a <READ_HOLDING_REG+0x42>
 8000204:	793b      	ldrb	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <READ_HOLDING_REG+0x46>
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <READ_HOLDING_REG+0x48>
 800020e:	2300      	movs	r3, #0
 8000210:	827b      	strh	r3, [r7, #18]


	HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 8000212:	2018      	movs	r0, #24
 8000214:	f000 fd06 	bl	8000c24 <HAL_Delay>
	//HAL_UART_Transmit(&huart1,buff, sizeof(buff),500);
	HAL_UART_Transmit(&huart3,buff, sizeof(buff),5000);
 8000218:	f107 0108 	add.w	r1, r7, #8
 800021c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000220:	2206      	movs	r2, #6
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <READ_HOLDING_REG+0xe4>)
 8000224:	f002 fb24 	bl	8002870 <HAL_UART_Transmit>
	HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 8000228:	2018      	movs	r0, #24
 800022a:	f000 fcfb 	bl	8000c24 <HAL_Delay>


	HAL_UART_Receive (&huart1, rec_data, 2*sizeof(N) , 5000);
 800022e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000232:	2204      	movs	r2, #4
 8000234:	491e      	ldr	r1, [pc, #120]	; (80002b0 <READ_HOLDING_REG+0xe8>)
 8000236:	481f      	ldr	r0, [pc, #124]	; (80002b4 <READ_HOLDING_REG+0xec>)
 8000238:	f002 fbae 	bl	8002998 <HAL_UART_Receive>
	if(rec_data[1] == 0x83)//error code returned check error map array for exact error
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <READ_HOLDING_REG+0xe8>)
 800023e:	785b      	ldrb	r3, [r3, #1]
 8000240:	2b83      	cmp	r3, #131	; 0x83
 8000242:	d105      	bne.n	8000250 <READ_HOLDING_REG+0x88>
	{
		error_map[0] = rec_data[2];
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <READ_HOLDING_REG+0xe8>)
 8000246:	789a      	ldrb	r2, [r3, #2]
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <READ_HOLDING_REG+0xf0>)
 800024a:	701a      	strb	r2, [r3, #0]
		return 2;
 800024c:	2302      	movs	r3, #2
 800024e:	e028      	b.n	80002a2 <READ_HOLDING_REG+0xda>
	}
	if(rec_data[1]==0x03)	// successfully transmitted command and successfully received data
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <READ_HOLDING_REG+0xe8>)
 8000252:	785b      	ldrb	r3, [r3, #1]
 8000254:	2b03      	cmp	r3, #3
 8000256:	d123      	bne.n	80002a0 <READ_HOLDING_REG+0xd8>
	{
		uint16_t add_full = (Add_HI&0xFF00)||(Add_HI&0x00FF);
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800025e:	2b00      	cmp	r3, #0
 8000260:	d102      	bne.n	8000268 <READ_HOLDING_REG+0xa0>
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <READ_HOLDING_REG+0xa4>
 8000268:	2301      	movs	r3, #1
 800026a:	e000      	b.n	800026e <READ_HOLDING_REG+0xa6>
 800026c:	2300      	movs	r3, #0
 800026e:	823b      	strh	r3, [r7, #16]
		add_full = add_full - 0x3FFF ;
 8000270:	8a3b      	ldrh	r3, [r7, #16]
 8000272:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8000276:	3b3f      	subs	r3, #63	; 0x3f
 8000278:	823b      	strh	r3, [r7, #16]
		for(int i=0;i<N;i++)
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	e009      	b.n	8000294 <READ_HOLDING_REG+0xcc>
		{
			hold_reg_map[add_full] = rec_data[i+2];
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	1c9a      	adds	r2, r3, #2
 8000284:	8a3b      	ldrh	r3, [r7, #16]
 8000286:	490a      	ldr	r1, [pc, #40]	; (80002b0 <READ_HOLDING_REG+0xe8>)
 8000288:	5c89      	ldrb	r1, [r1, r2]
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <READ_HOLDING_REG+0xf4>)
 800028c:	54d1      	strb	r1, [r2, r3]
		for(int i=0;i<N;i++)
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	3301      	adds	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	8a7b      	ldrh	r3, [r7, #18]
 8000296:	697a      	ldr	r2, [r7, #20]
 8000298:	429a      	cmp	r2, r3
 800029a:	dbf1      	blt.n	8000280 <READ_HOLDING_REG+0xb8>

		}
		return(1);
 800029c:	2301      	movs	r3, #1
 800029e:	e000      	b.n	80002a2 <READ_HOLDING_REG+0xda>
	}
	else
		{
			//HAL_UART_Transmit(&huart3,"error",6,500);
			return(0);
 80002a0:	2300      	movs	r3, #0
		}

}
 80002a2:	4618      	mov	r0, r3
 80002a4:	371c      	adds	r7, #28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd90      	pop	{r4, r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200001a4 	.word	0x200001a4
 80002b0:	200002ac 	.word	0x200002ac
 80002b4:	20000228 	.word	0x20000228
 80002b8:	200001a0 	.word	0x200001a0
 80002bc:	20000124 	.word	0x20000124

080002c0 <READ_INPUT_REG>:

int READ_INPUT_REG(uint8_t Add_HI,uint8_t Add_LO,uint8_t Num_reg)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	460b      	mov	r3, r1
 80002cc:	71bb      	strb	r3, [r7, #6]
 80002ce:	4613      	mov	r3, r2
 80002d0:	717b      	strb	r3, [r7, #5]
		uint8_t buff[6] = {SLAVE_ADD,0x04,Add_HI,Add_LO,Num_reg};
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	809a      	strh	r2, [r3, #4]
 80002dc:	2301      	movs	r3, #1
 80002de:	733b      	strb	r3, [r7, #12]
 80002e0:	2304      	movs	r3, #4
 80002e2:	737b      	strb	r3, [r7, #13]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	73bb      	strb	r3, [r7, #14]
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	73fb      	strb	r3, [r7, #15]
 80002ec:	797b      	ldrb	r3, [r7, #5]
 80002ee:	743b      	strb	r3, [r7, #16]

		HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 80002f0:	2018      	movs	r0, #24
 80002f2:	f000 fc97 	bl	8000c24 <HAL_Delay>
		HAL_UART_Transmit(&huart3,buff, sizeof(buff),500);
 80002f6:	f107 010c 	add.w	r1, r7, #12
 80002fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002fe:	2206      	movs	r2, #6
 8000300:	4822      	ldr	r0, [pc, #136]	; (800038c <READ_INPUT_REG+0xcc>)
 8000302:	f002 fab5 	bl	8002870 <HAL_UART_Transmit>
		HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 8000306:	2018      	movs	r0, #24
 8000308:	f000 fc8c 	bl	8000c24 <HAL_Delay>

		HAL_UART_Receive (&huart1, rec_data, Num_reg , 5000);
 800030c:	797b      	ldrb	r3, [r7, #5]
 800030e:	b29a      	uxth	r2, r3
 8000310:	f241 3388 	movw	r3, #5000	; 0x1388
 8000314:	491e      	ldr	r1, [pc, #120]	; (8000390 <READ_INPUT_REG+0xd0>)
 8000316:	481f      	ldr	r0, [pc, #124]	; (8000394 <READ_INPUT_REG+0xd4>)
 8000318:	f002 fb3e 	bl	8002998 <HAL_UART_Receive>
		if(rec_data[1] == 0x84)
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <READ_INPUT_REG+0xd0>)
 800031e:	785b      	ldrb	r3, [r3, #1]
 8000320:	2b84      	cmp	r3, #132	; 0x84
 8000322:	d105      	bne.n	8000330 <READ_INPUT_REG+0x70>
			{
				error_map[1] = rec_data[2];
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <READ_INPUT_REG+0xd0>)
 8000326:	789a      	ldrb	r2, [r3, #2]
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <READ_INPUT_REG+0xd8>)
 800032a:	705a      	strb	r2, [r3, #1]
				return 2;
 800032c:	2302      	movs	r3, #2
 800032e:	e028      	b.n	8000382 <READ_INPUT_REG+0xc2>
			}
		if(rec_data[1]==0x04)
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <READ_INPUT_REG+0xd0>)
 8000332:	785b      	ldrb	r3, [r3, #1]
 8000334:	2b04      	cmp	r3, #4
 8000336:	d123      	bne.n	8000380 <READ_INPUT_REG+0xc0>
		{
			uint16_t add_full = (Add_HI&0xFF00)||(Add_HI&0x00FF);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <READ_INPUT_REG+0x88>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <READ_INPUT_REG+0x8c>
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <READ_INPUT_REG+0x8e>
 800034c:	2300      	movs	r3, #0
 800034e:	827b      	strh	r3, [r7, #18]
			add_full = add_full - 0x3FE0 ;
 8000350:	8a7b      	ldrh	r3, [r7, #18]
 8000352:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8000356:	3b20      	subs	r3, #32
 8000358:	827b      	strh	r3, [r7, #18]

			for(int i=1;i<Num_reg;i++)
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	e009      	b.n	8000374 <READ_INPUT_REG+0xb4>
			{
				inp_reg_map[add_full] = rec_data[i+2];
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1c9a      	adds	r2, r3, #2
 8000364:	8a7b      	ldrh	r3, [r7, #18]
 8000366:	490a      	ldr	r1, [pc, #40]	; (8000390 <READ_INPUT_REG+0xd0>)
 8000368:	5c89      	ldrb	r1, [r1, r2]
 800036a:	4a0c      	ldr	r2, [pc, #48]	; (800039c <READ_INPUT_REG+0xdc>)
 800036c:	54d1      	strb	r1, [r2, r3]
			for(int i=1;i<Num_reg;i++)
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3301      	adds	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	797b      	ldrb	r3, [r7, #5]
 8000376:	697a      	ldr	r2, [r7, #20]
 8000378:	429a      	cmp	r2, r3
 800037a:	dbf1      	blt.n	8000360 <READ_INPUT_REG+0xa0>
			}
			return(1);
 800037c:	2301      	movs	r3, #1
 800037e:	e000      	b.n	8000382 <READ_INPUT_REG+0xc2>

		}
		else
			{
				return(0);
 8000380:	2300      	movs	r3, #0
			}
}
 8000382:	4618      	mov	r0, r3
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200001a4 	.word	0x200001a4
 8000390:	200002ac 	.word	0x200002ac
 8000394:	20000228 	.word	0x20000228
 8000398:	200001a0 	.word	0x200001a0
 800039c:	2000015c 	.word	0x2000015c

080003a0 <WRITE_SINGLE_REG>:

int WRITE_SINGLE_REG(uint8_t Add_HI,uint8_t Add_LO,uint16_t value)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
 80003aa:	460b      	mov	r3, r1
 80003ac:	71bb      	strb	r3, [r7, #6]
 80003ae:	4613      	mov	r3, r2
 80003b0:	80bb      	strh	r3, [r7, #4]
	uint8_t buff[] = {SLAVE_ADD,0x06,Add_HI,Add_LO,(value&0xFF00),(value&0x00FF)};
 80003b2:	2301      	movs	r3, #1
 80003b4:	723b      	strb	r3, [r7, #8]
 80003b6:	2306      	movs	r3, #6
 80003b8:	727b      	strb	r3, [r7, #9]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	72bb      	strb	r3, [r7, #10]
 80003be:	79bb      	ldrb	r3, [r7, #6]
 80003c0:	72fb      	strb	r3, [r7, #11]
 80003c2:	2300      	movs	r3, #0
 80003c4:	733b      	strb	r3, [r7, #12]
 80003c6:	88bb      	ldrh	r3, [r7, #4]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	737b      	strb	r3, [r7, #13]

	HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 80003cc:	2018      	movs	r0, #24
 80003ce:	f000 fc29 	bl	8000c24 <HAL_Delay>
	HAL_UART_Transmit(&huart3,buff,sizeof(buff),500);
 80003d2:	f107 0108 	add.w	r1, r7, #8
 80003d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003da:	2206      	movs	r2, #6
 80003dc:	481b      	ldr	r0, [pc, #108]	; (800044c <WRITE_SINGLE_REG+0xac>)
 80003de:	f002 fa47 	bl	8002870 <HAL_UART_Transmit>
	HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 80003e2:	2018      	movs	r0, #24
 80003e4:	f000 fc1e 	bl	8000c24 <HAL_Delay>

	HAL_UART_Receive(&huart1,rec_data,sizeof(buff)+2,5000);
 80003e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80003ec:	2208      	movs	r2, #8
 80003ee:	4918      	ldr	r1, [pc, #96]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <WRITE_SINGLE_REG+0xb4>)
 80003f2:	f002 fad1 	bl	8002998 <HAL_UART_Receive>
	if(rec_data[1] == 0x86)
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 80003f8:	785b      	ldrb	r3, [r3, #1]
 80003fa:	2b86      	cmp	r3, #134	; 0x86
 80003fc:	d105      	bne.n	800040a <WRITE_SINGLE_REG+0x6a>
		{
			error_map[2] = rec_data[2];
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 8000400:	789a      	ldrb	r2, [r3, #2]
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <WRITE_SINGLE_REG+0xb8>)
 8000404:	709a      	strb	r2, [r3, #2]
			return 2;
 8000406:	2302      	movs	r3, #2
 8000408:	e01c      	b.n	8000444 <WRITE_SINGLE_REG+0xa4>
		}
	if(rec_data[1]==0x06)
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 800040c:	785b      	ldrb	r3, [r3, #1]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d117      	bne.n	8000442 <WRITE_SINGLE_REG+0xa2>
	{
		if(rec_data[2]==buff[2]&&rec_data[3]==buff[3]&&rec_data[4]==buff[4]&&rec_data[5]==buff[5])
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 8000414:	789a      	ldrb	r2, [r3, #2]
 8000416:	7abb      	ldrb	r3, [r7, #10]
 8000418:	429a      	cmp	r2, r3
 800041a:	d110      	bne.n	800043e <WRITE_SINGLE_REG+0x9e>
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 800041e:	78da      	ldrb	r2, [r3, #3]
 8000420:	7afb      	ldrb	r3, [r7, #11]
 8000422:	429a      	cmp	r2, r3
 8000424:	d10b      	bne.n	800043e <WRITE_SINGLE_REG+0x9e>
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 8000428:	791a      	ldrb	r2, [r3, #4]
 800042a:	7b3b      	ldrb	r3, [r7, #12]
 800042c:	429a      	cmp	r2, r3
 800042e:	d106      	bne.n	800043e <WRITE_SINGLE_REG+0x9e>
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <WRITE_SINGLE_REG+0xb0>)
 8000432:	795a      	ldrb	r2, [r3, #5]
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	429a      	cmp	r2, r3
 8000438:	d101      	bne.n	800043e <WRITE_SINGLE_REG+0x9e>
		{
			return 1;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <WRITE_SINGLE_REG+0xa4>
		}
		else return 2;
 800043e:	2302      	movs	r3, #2
 8000440:	e000      	b.n	8000444 <WRITE_SINGLE_REG+0xa4>
	}
	else
		return 2;
 8000442:	2302      	movs	r3, #2
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200001a4 	.word	0x200001a4
 8000450:	200002ac 	.word	0x200002ac
 8000454:	20000228 	.word	0x20000228
 8000458:	200001a0 	.word	0x200001a0

0800045c <WRITE_MULTI_REG>:

int WRITE_MULTI_REG(uint8_t Add_HI, uint8_t Add_LO, uint8_t Num_of_reg_HI, uint8_t Num_of_reg_LO)
{
 800045c:	b5b0      	push	{r4, r5, r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0
 8000462:	4604      	mov	r4, r0
 8000464:	4608      	mov	r0, r1
 8000466:	4611      	mov	r1, r2
 8000468:	461a      	mov	r2, r3
 800046a:	4623      	mov	r3, r4
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	4603      	mov	r3, r0
 8000470:	71bb      	strb	r3, [r7, #6]
 8000472:	460b      	mov	r3, r1
 8000474:	717b      	strb	r3, [r7, #5]
 8000476:	4613      	mov	r3, r2
 8000478:	713b      	strb	r3, [r7, #4]
 800047a:	466b      	mov	r3, sp
 800047c:	461d      	mov	r5, r3
	uint8_t N = 2* (((Num_of_reg_HI&0xFF00)||(Num_of_reg_LO&0x00FF))&(0x00FF));
 800047e:	797b      	ldrb	r3, [r7, #5]
 8000480:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <WRITE_MULTI_REG+0x32>
 8000488:	793b      	ldrb	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <WRITE_MULTI_REG+0x36>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <WRITE_MULTI_REG+0x38>
 8000492:	2300      	movs	r3, #0
 8000494:	b2db      	uxtb	r3, r3
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	76fb      	strb	r3, [r7, #27]
	uint8_t multi_send[N];
 800049a:	7efc      	ldrb	r4, [r7, #27]
 800049c:	4623      	mov	r3, r4
 800049e:	3b01      	subs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	b2e0      	uxtb	r0, r4
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	f04f 0200 	mov.w	r2, #0
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	00cb      	lsls	r3, r1, #3
 80004b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004b6:	00c2      	lsls	r2, r0, #3
 80004b8:	b2e0      	uxtb	r0, r4
 80004ba:	f04f 0100 	mov.w	r1, #0
 80004be:	f04f 0200 	mov.w	r2, #0
 80004c2:	f04f 0300 	mov.w	r3, #0
 80004c6:	00cb      	lsls	r3, r1, #3
 80004c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004cc:	00c2      	lsls	r2, r0, #3
 80004ce:	4623      	mov	r3, r4
 80004d0:	3307      	adds	r3, #7
 80004d2:	08db      	lsrs	r3, r3, #3
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	ebad 0d03 	sub.w	sp, sp, r3
 80004da:	466b      	mov	r3, sp
 80004dc:	3300      	adds	r3, #0
 80004de:	613b      	str	r3, [r7, #16]
	for (int i=0;(write_reg_map[i]!=-1 || i<249);i++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	e00d      	b.n	8000502 <WRITE_MULTI_REG+0xa6>
	{
		multi_send[i]=write_reg_map[i];
 80004e6:	4a51      	ldr	r2, [pc, #324]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	4413      	add	r3, r2
 80004ec:	f993 3000 	ldrsb.w	r3, [r3]
 80004f0:	b2d9      	uxtb	r1, r3
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	4413      	add	r3, r2
 80004f8:	460a      	mov	r2, r1
 80004fa:	701a      	strb	r2, [r3, #0]
	for (int i=0;(write_reg_map[i]!=-1 || i<249);i++)
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	3301      	adds	r3, #1
 8000500:	61fb      	str	r3, [r7, #28]
 8000502:	4a4a      	ldr	r2, [pc, #296]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	4413      	add	r3, r2
 8000508:	f993 3000 	ldrsb.w	r3, [r3]
 800050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000510:	d1e9      	bne.n	80004e6 <WRITE_MULTI_REG+0x8a>
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	2bf8      	cmp	r3, #248	; 0xf8
 8000516:	dde6      	ble.n	80004e6 <WRITE_MULTI_REG+0x8a>
	}
	uint8_t buff[] = {SLAVE_ADD,0x10,Add_HI,Add_LO,Num_of_reg_HI,Num_of_reg_LO,N,multi_send};
 8000518:	2301      	movs	r3, #1
 800051a:	723b      	strb	r3, [r7, #8]
 800051c:	2310      	movs	r3, #16
 800051e:	727b      	strb	r3, [r7, #9]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	72bb      	strb	r3, [r7, #10]
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	72fb      	strb	r3, [r7, #11]
 8000528:	797b      	ldrb	r3, [r7, #5]
 800052a:	733b      	strb	r3, [r7, #12]
 800052c:	793b      	ldrb	r3, [r7, #4]
 800052e:	737b      	strb	r3, [r7, #13]
 8000530:	7efb      	ldrb	r3, [r7, #27]
 8000532:	73bb      	strb	r3, [r7, #14]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	73fb      	strb	r3, [r7, #15]

		HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 800053a:	2018      	movs	r0, #24
 800053c:	f000 fb72 	bl	8000c24 <HAL_Delay>
		HAL_UART_Transmit(&huart3,buff,sizeof(buff),500);
 8000540:	f107 0108 	add.w	r1, r7, #8
 8000544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000548:	2208      	movs	r2, #8
 800054a:	4839      	ldr	r0, [pc, #228]	; (8000630 <WRITE_MULTI_REG+0x1d4>)
 800054c:	f002 f990 	bl	8002870 <HAL_UART_Transmit>
		HAL_Delay(24);//Silence on channel required for 24ms for baud rate 57600
 8000550:	2018      	movs	r0, #24
 8000552:	f000 fb67 	bl	8000c24 <HAL_Delay>

		HAL_UART_Receive(&huart1,rec_data,6,5000);
 8000556:	f241 3388 	movw	r3, #5000	; 0x1388
 800055a:	2206      	movs	r2, #6
 800055c:	4935      	ldr	r1, [pc, #212]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 800055e:	4836      	ldr	r0, [pc, #216]	; (8000638 <WRITE_MULTI_REG+0x1dc>)
 8000560:	f002 fa1a 	bl	8002998 <HAL_UART_Receive>
		if(rec_data[1] == 0x86)
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 8000566:	785b      	ldrb	r3, [r3, #1]
 8000568:	2b86      	cmp	r3, #134	; 0x86
 800056a:	d113      	bne.n	8000594 <WRITE_MULTI_REG+0x138>
			{
				error_map[3] = rec_data[2];
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 800056e:	789a      	ldrb	r2, [r3, #2]
 8000570:	4b32      	ldr	r3, [pc, #200]	; (800063c <WRITE_MULTI_REG+0x1e0>)
 8000572:	70da      	strb	r2, [r3, #3]
				for(int k =0;k<249;k++)
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	e007      	b.n	800058a <WRITE_MULTI_REG+0x12e>
				write_reg_map[k]=-1;
 800057a:	4a2c      	ldr	r2, [pc, #176]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	4413      	add	r3, r2
 8000580:	22ff      	movs	r2, #255	; 0xff
 8000582:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	3301      	adds	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	2bf8      	cmp	r3, #248	; 0xf8
 800058e:	ddf4      	ble.n	800057a <WRITE_MULTI_REG+0x11e>
				return 2;
 8000590:	2302      	movs	r3, #2
 8000592:	e046      	b.n	8000622 <WRITE_MULTI_REG+0x1c6>
			}
		if(rec_data[1]==0x10)
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b10      	cmp	r3, #16
 800059a:	d133      	bne.n	8000604 <WRITE_MULTI_REG+0x1a8>
		{
			if(rec_data[2]==buff[2]&&rec_data[3]==buff[3]&&rec_data[4]==buff[4]&&rec_data[5]==buff[5])
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 800059e:	789a      	ldrb	r2, [r3, #2]
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d11e      	bne.n	80005e4 <WRITE_MULTI_REG+0x188>
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 80005a8:	78da      	ldrb	r2, [r3, #3]
 80005aa:	7afb      	ldrb	r3, [r7, #11]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d119      	bne.n	80005e4 <WRITE_MULTI_REG+0x188>
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 80005b2:	791a      	ldrb	r2, [r3, #4]
 80005b4:	7b3b      	ldrb	r3, [r7, #12]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <WRITE_MULTI_REG+0x188>
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <WRITE_MULTI_REG+0x1d8>)
 80005bc:	795a      	ldrb	r2, [r3, #5]
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d10f      	bne.n	80005e4 <WRITE_MULTI_REG+0x188>
			{
				for(int k =0;k<249;k++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
 80005c8:	e007      	b.n	80005da <WRITE_MULTI_REG+0x17e>
				write_reg_map[k]=-1;
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	22ff      	movs	r2, #255	; 0xff
 80005d2:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	3301      	adds	r3, #1
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	2bf8      	cmp	r3, #248	; 0xf8
 80005de:	ddf4      	ble.n	80005ca <WRITE_MULTI_REG+0x16e>
				return 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e01e      	b.n	8000622 <WRITE_MULTI_REG+0x1c6>
			}
			else
				{
				for(int k =0;k<249;k++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	e007      	b.n	80005fa <WRITE_MULTI_REG+0x19e>
				write_reg_map[k]=-1;
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 80005ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ee:	4413      	add	r3, r2
 80005f0:	22ff      	movs	r2, #255	; 0xff
 80005f2:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 80005f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f6:	3301      	adds	r3, #1
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80005fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fc:	2bf8      	cmp	r3, #248	; 0xf8
 80005fe:	ddf4      	ble.n	80005ea <WRITE_MULTI_REG+0x18e>
					return 2;
 8000600:	2302      	movs	r3, #2
 8000602:	e00e      	b.n	8000622 <WRITE_MULTI_REG+0x1c6>
				}
		}
		else
		{
			for(int k =0;k<249;k++)
 8000604:	2300      	movs	r3, #0
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000608:	e007      	b.n	800061a <WRITE_MULTI_REG+0x1be>
			write_reg_map[k]=-1;
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <WRITE_MULTI_REG+0x1d0>)
 800060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060e:	4413      	add	r3, r2
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	701a      	strb	r2, [r3, #0]
			for(int k =0;k<249;k++)
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	3301      	adds	r3, #1
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061c:	2bf8      	cmp	r3, #248	; 0xf8
 800061e:	ddf4      	ble.n	800060a <WRITE_MULTI_REG+0x1ae>
			return 2;
 8000620:	2302      	movs	r3, #2
 8000622:	46ad      	mov	sp, r5
		}
}
 8000624:	4618      	mov	r0, r3
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bdb0      	pop	{r4, r5, r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	200001a4 	.word	0x200001a4
 8000634:	200002ac 	.word	0x200002ac
 8000638:	20000228 	.word	0x20000228
 800063c:	200001a0 	.word	0x200001a0

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fa87 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f84d 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8ff 	bl	8000850 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 f89b 	bl	800078c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000656:	f000 f8cb 	bl	80007f0 <MX_USART3_UART_Init>

    /* USER CODE BEGIN 3 */
	  //char msg[]= "TESTING";
	 // HAL_UART_Transmit(&huart3, "TEST", 4, HAL_MAX_DELAY);
	 // HAL_UART_Transmit(&huart1, "TEST", 4, HAL_MAX_DELAY);
	  int status = READ_HOLDING_REG(0x40,0x00,0x00,0x01);
 800065a:	2301      	movs	r3, #1
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2040      	movs	r0, #64	; 0x40
 8000662:	f7ff fdb1 	bl	80001c8 <READ_HOLDING_REG>
 8000666:	6078      	str	r0, [r7, #4]
	  HAL_Delay(30000);
 8000668:	f247 5030 	movw	r0, #30000	; 0x7530
 800066c:	f000 fada 	bl	8000c24 <HAL_Delay>
	  status = READ_INPUT_REG(0x46,0x00,0x08);
 8000670:	2208      	movs	r2, #8
 8000672:	2100      	movs	r1, #0
 8000674:	2046      	movs	r0, #70	; 0x46
 8000676:	f7ff fe23 	bl	80002c0 <READ_INPUT_REG>
 800067a:	6078      	str	r0, [r7, #4]
	  HAL_Delay(30000);
 800067c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000680:	f000 fad0 	bl	8000c24 <HAL_Delay>
	  status = WRITE_SINGLE_REG(0x40,0x32,0x4432);
 8000684:	f244 4232 	movw	r2, #17458	; 0x4432
 8000688:	2132      	movs	r1, #50	; 0x32
 800068a:	2040      	movs	r0, #64	; 0x40
 800068c:	f7ff fe88 	bl	80003a0 <WRITE_SINGLE_REG>
 8000690:	6078      	str	r0, [r7, #4]
	  HAL_Delay(30000);
 8000692:	f247 5030 	movw	r0, #30000	; 0x7530
 8000696:	f000 fac5 	bl	8000c24 <HAL_Delay>
	  write_reg_map[1] = 20;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0xa4>)
 800069c:	2214      	movs	r2, #20
 800069e:	705a      	strb	r2, [r3, #1]
	  write_reg_map[2] = 30;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <main+0xa4>)
 80006a2:	221e      	movs	r2, #30
 80006a4:	709a      	strb	r2, [r3, #2]
	  write_reg_map[3] = 40;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <main+0xa4>)
 80006a8:	2228      	movs	r2, #40	; 0x28
 80006aa:	70da      	strb	r2, [r3, #3]
	  write_reg_map[4] = 50;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0xa4>)
 80006ae:	2232      	movs	r2, #50	; 0x32
 80006b0:	711a      	strb	r2, [r3, #4]
	  write_reg_map[5] = 60;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <main+0xa4>)
 80006b4:	223c      	movs	r2, #60	; 0x3c
 80006b6:	715a      	strb	r2, [r3, #5]
	  write_reg_map[6] = 70;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <main+0xa4>)
 80006ba:	2246      	movs	r2, #70	; 0x46
 80006bc:	719a      	strb	r2, [r3, #6]
	  write_reg_map[7] = 80;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0xa4>)
 80006c0:	2250      	movs	r2, #80	; 0x50
 80006c2:	71da      	strb	r2, [r3, #7]
	  write_reg_map[8] = 90;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <main+0xa4>)
 80006c6:	225a      	movs	r2, #90	; 0x5a
 80006c8:	721a      	strb	r2, [r3, #8]
	  status = WRITE_MULTI_REG(0x46,0x00,0x00,0x08);
 80006ca:	2308      	movs	r3, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2046      	movs	r0, #70	; 0x46
 80006d2:	f7ff fec3 	bl	800045c <WRITE_MULTI_REG>
 80006d6:	6078      	str	r0, [r7, #4]
	  HAL_Delay(30000);
 80006d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80006dc:	f000 faa2 	bl	8000c24 <HAL_Delay>
  {
 80006e0:	e7bb      	b.n	800065a <main+0x1a>
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09a      	sub	sp, #104	; 0x68
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f2:	2228      	movs	r2, #40	; 0x28
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f800 	bl	80036fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	222c      	movs	r2, #44	; 0x2c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fff2 	bl	80036fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fd9f 	bl	8001270 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000738:	f000 f8ba 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc92 	bl	8002080 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000762:	f000 f8a5 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000766:	2305      	movs	r3, #5
 8000768:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f001 feb9 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000780:	f000 f896 	bl	80008b0 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3768      	adds	r7, #104	; 0x68
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_USART1_UART_Init+0x60>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000798:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007d6:	f002 fefc 	bl	80035d2 <HAL_RS485Ex_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f866 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000228 	.word	0x20000228
 80007ec:	40013800 	.word	0x40013800

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART3_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART3_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART3_UART_Init+0x58>)
 80007fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART3_UART_Init+0x58>)
 8000834:	f001 ffce 	bl	80027d4 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f837 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001a4 	.word	0x200001a4
 800084c:	40004800 	.word	0x40004800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_GPIO_Init+0x5c>)
 800085c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_GPIO_Init+0x5c>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_GPIO_Init+0x5c>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_GPIO_Init+0x5c>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_MspInit+0x44>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a50      	ldr	r2, [pc, #320]	; (8000a64 <HAL_UART_MspInit+0x160>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d14e      	bne.n	80009c4 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a4f      	ldr	r2, [pc, #316]	; (8000a68 <HAL_UART_MspInit+0x164>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a49      	ldr	r2, [pc, #292]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <HAL_UART_MspInit+0x164>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <HAL_UART_MspInit+0x164>)
 800095c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PE0     ------> USART1_TX
    PE1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000980:	2307      	movs	r3, #7
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 faf5 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000992:	2303      	movs	r3, #3
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a2:	2307      	movs	r3, #7
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	482f      	ldr	r0, [pc, #188]	; (8000a6c <HAL_UART_MspInit+0x168>)
 80009ae:	f000 fae5 	bl	8000f7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2025      	movs	r0, #37	; 0x25
 80009b8:	f000 fa33 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009bc:	2025      	movs	r0, #37	; 0x25
 80009be:	f000 fa4c 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c2:	e04a      	b.n	8000a5a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <HAL_UART_MspInit+0x16c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d145      	bne.n	8000a5a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x164>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x164>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x168>)
 8000a34:	f000 faa2 	bl	8000f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <HAL_UART_MspInit+0x170>)
 8000a56:	f000 fa91 	bl	8000f7c <HAL_GPIO_Init>
}
 8000a5a:	bf00      	nop
 8000a5c:	3738      	adds	r7, #56	; 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48001000 	.word	0x48001000
 8000a70:	40004800 	.word	0x40004800
 8000a74:	48000400 	.word	0x48000400

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f88e 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART1_IRQHandler+0x10>)
 8000ad2:	f002 f81f 	bl	8002b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000228 	.word	0x20000228

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f002 fdbf 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fd83 	bl	8000640 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b3c:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000b48:	08003764 	.word	0x08003764
  ldr r2, =_sbss
 8000b4c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000b50:	200002d0 	.word	0x200002d0

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f94f 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fea2 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f967 	bl	8000e76 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f92f 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000fc 	.word	0x200000fc
 8000bdc:	20000104 	.word	0x20000104
 8000be0:	20000100 	.word	0x20000100

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000104 	.word	0x20000104
 8000c08:	200002cc 	.word	0x200002cc

08000c0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200002cc 	.word	0x200002cc

08000c24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000104 	.word	0x20000104

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d008      	beq.n	8000eb2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e020      	b.n	8000ef4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 020e 	bic.w	r2, r2, #14
 8000ec0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d005      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2204      	movs	r2, #4
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e027      	b.n	8000f72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 020e 	bic.w	r2, r2, #14
 8000f30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	4798      	blx	r3
    } 
  }
  return status;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e154      	b.n	8001236 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8146 	beq.w	8001230 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	2b11      	cmp	r3, #17
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f003 0201 	and.w	r2, r3, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0xea>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b12      	cmp	r3, #18
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	6939      	ldr	r1, [r7, #16]
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0203 	and.w	r2, r3, #3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a0 	beq.w	8001230 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_GPIO_Init+0x2d8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a57      	ldr	r2, [pc, #348]	; (8001254 <HAL_GPIO_Init+0x2d8>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b55      	ldr	r3, [pc, #340]	; (8001254 <HAL_GPIO_Init+0x2d8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001108:	4a53      	ldr	r2, [pc, #332]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001132:	d019      	beq.n	8001168 <HAL_GPIO_Init+0x1ec>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_GPIO_Init+0x2e0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x1e8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a48      	ldr	r2, [pc, #288]	; (8001260 <HAL_GPIO_Init+0x2e4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1e4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1e0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a46      	ldr	r2, [pc, #280]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1dc>
 8001154:	2304      	movs	r3, #4
 8001156:	e008      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001158:	2305      	movs	r3, #5
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 800115c:	2303      	movs	r3, #3
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001160:	2302      	movs	r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1ee>
 8001168:	2300      	movs	r3, #0
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117a:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_GPIO_Init+0x2f0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d6:	4a25      	ldr	r2, [pc, #148]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <HAL_GPIO_Init+0x2f0>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_Init+0x2f0>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_GPIO_Init+0x2f0>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f aea3 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	48000400 	.word	0x48000400
 8001260:	48000800 	.word	0x48000800
 8001264:	48000c00 	.word	0x48000c00
 8001268:	48001000 	.word	0x48001000
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001276:	af00      	add	r7, sp, #0
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	f000 bef4 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 816a 	beq.w	800156e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800129a:	4bb3      	ldr	r3, [pc, #716]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a6:	4bb0      	ldr	r3, [pc, #704]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d159      	bne.n	8001366 <HAL_RCC_OscConfig+0xf6>
 80012b2:	4bad      	ldr	r3, [pc, #692]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012be:	d152      	bne.n	8001366 <HAL_RCC_OscConfig+0xf6>
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d102      	bne.n	80012f2 <HAL_RCC_OscConfig+0x82>
 80012ec:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0xae>
 80012f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800130e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800131a:	4b93      	ldr	r3, [pc, #588]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001322:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001326:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800132a:	fa92 f2a2 	rbit	r2, r2
 800132e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001332:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001336:	fab2 f282 	clz	r2, r2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f042 0220 	orr.w	r2, r2, #32
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	f002 021f 	and.w	r2, r2, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 810c 	beq.w	800156c <HAL_RCC_OscConfig+0x2fc>
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8106 	bne.w	800156c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f000 be86 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x110>
 8001372:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7c      	ldr	r2, [pc, #496]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e030      	b.n	80013e2 <HAL_RCC_OscConfig+0x172>
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x134>
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a76      	ldr	r2, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b74      	ldr	r3, [pc, #464]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a73      	ldr	r2, [pc, #460]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01e      	b.n	80013e2 <HAL_RCC_OscConfig+0x172>
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x15a>
 80013b0:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6c      	ldr	r2, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a69      	ldr	r2, [pc, #420]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x172>
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a66      	ldr	r2, [pc, #408]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b64      	ldr	r3, [pc, #400]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a63      	ldr	r2, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013e2:	4b61      	ldr	r3, [pc, #388]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f023 020f 	bic.w	r2, r3, #15
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	495d      	ldr	r1, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d059      	beq.n	80014b4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fc04 	bl	8000c0c <HAL_GetTick>
 8001404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140a:	f7ff fbff 	bl	8000c0c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d902      	bls.n	8001420 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	f000 be29 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001434:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0x1e2>
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x20e>
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800146e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001482:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001486:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001492:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0220 	orr.w	r2, r2, #32
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0ab      	beq.n	800140a <HAL_RCC_OscConfig+0x19a>
 80014b2:	e05c      	b.n	800156e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fbaa 	bl	8000c0c <HAL_GetTick>
 80014b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff fba5 	bl	8000c0c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d902      	bls.n	80014d4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f000 bdcf 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
 80014d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x296>
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x2c2>
 8001506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800151a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001522:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_RCC_OscConfig+0x2f8>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001536:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800153a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800153e:	fa92 f2a2 	rbit	r2, r2
 8001542:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001546:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800154a:	fab2 f282 	clz	r2, r2
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f042 0220 	orr.w	r2, r2, #32
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ab      	bne.n	80014be <HAL_RCC_OscConfig+0x24e>
 8001566:	e002      	b.n	800156e <HAL_RCC_OscConfig+0x2fe>
 8001568:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 816f 	beq.w	800185c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800157e:	4bd0      	ldr	r3, [pc, #832]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800158a:	4bcd      	ldr	r3, [pc, #820]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d16c      	bne.n	8001670 <HAL_RCC_OscConfig+0x400>
 8001596:	4bca      	ldr	r3, [pc, #808]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d166      	bne.n	8001670 <HAL_RCC_OscConfig+0x400>
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x362>
 80015cc:	4bbc      	ldr	r3, [pc, #752]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e013      	b.n	80015fa <HAL_RCC_OscConfig+0x38a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015f6:	4bb2      	ldr	r3, [pc, #712]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	2202      	movs	r2, #2
 80015fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001600:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001604:	fa92 f2a2 	rbit	r2, r2
 8001608:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800160c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001610:	fab2 f282 	clz	r2, r2
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f002 021f 	and.w	r2, r2, #31
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_RCC_OscConfig+0x3cc>
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d002      	beq.n	800163c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	f000 bd1b 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4ba0      	ldr	r3, [pc, #640]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	21f8      	movs	r1, #248	; 0xf8
 800164c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001654:	fa91 f1a1 	rbit	r1, r1
 8001658:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800165c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001660:	fab1 f181 	clz	r1, r1
 8001664:	b2c9      	uxtb	r1, r1
 8001666:	408b      	lsls	r3, r1
 8001668:	4995      	ldr	r1, [pc, #596]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e0f5      	b.n	800185c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8085 	beq.w	8001786 <HAL_RCC_OscConfig+0x516>
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800168e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800169c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	461a      	mov	r2, r3
 80016a4:	2301      	movs	r3, #1
 80016a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fab0 	bl	8000c0c <HAL_GetTick>
 80016ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff faab 	bl	8000c0c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d902      	bls.n	80016c8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f000 bcd5 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x488>
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e013      	b.n	8001720 <HAL_RCC_OscConfig+0x4b0>
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001710:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2202      	movs	r2, #2
 8001722:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001726:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001732:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f042 0220 	orr.w	r2, r2, #32
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0af      	beq.n	80016b2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	21f8      	movs	r1, #248	; 0xf8
 8001762:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800176a:	fa91 f1a1 	rbit	r1, r1
 800176e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001772:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001776:	fab1 f181 	clz	r1, r1
 800177a:	b2c9      	uxtb	r1, r1
 800177c:	408b      	lsls	r3, r1
 800177e:	4950      	ldr	r1, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e06a      	b.n	800185c <HAL_RCC_OscConfig+0x5ec>
 8001786:	2301      	movs	r3, #1
 8001788:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001798:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	461a      	mov	r2, r3
 80017ae:	2300      	movs	r3, #0
 80017b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa2b 	bl	8000c0c <HAL_GetTick>
 80017b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa26 	bl	8000c0c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d902      	bls.n	80017d2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f000 bc50 	b.w	8002072 <HAL_RCC_OscConfig+0xe02>
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x592>
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e013      	b.n	800182a <HAL_RCC_OscConfig+0x5ba>
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800181a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_RCC_OscConfig+0x650>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	2202      	movs	r2, #2
 800182c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001830:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001834:	fa92 f2a2 	rbit	r2, r2
 8001838:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800183c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1af      	bne.n	80017bc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80da 	beq.w	8001a20 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d069      	beq.n	800194a <HAL_RCC_OscConfig+0x6da>
 8001876:	2301      	movs	r3, #1
 8001878:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x654>)
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	2301      	movs	r3, #1
 800189e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff f9b4 	bl	8000c0c <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a8:	e00e      	b.n	80018c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff f9af 	bl	8000c0c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d906      	bls.n	80018c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e3d9      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	10908120 	.word	0x10908120
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001908:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	4ba5      	ldr	r3, [pc, #660]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 800190c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800190e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001912:	2102      	movs	r1, #2
 8001914:	6019      	str	r1, [r3, #0]
 8001916:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f1a3 	rbit	r1, r3
 8001920:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001924:	6019      	str	r1, [r3, #0]
  return result;
 8001926:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0b0      	beq.n	80018aa <HAL_RCC_OscConfig+0x63a>
 8001948:	e06a      	b.n	8001a20 <HAL_RCC_OscConfig+0x7b0>
 800194a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001966:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x934>)
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	461a      	mov	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff f946 	bl	8000c0c <HAL_GetTick>
 8001980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e009      	b.n	800199a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f941 	bl	8000c0c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e36b      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 800199a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ce:	2202      	movs	r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e2:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 80019e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019ea:	2102      	movs	r1, #2
 80019ec:	6019      	str	r1, [r3, #0]
 80019ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f1a3 	rbit	r1, r3
 80019f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019fc:	6019      	str	r1, [r3, #0]
  return result;
 80019fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1b2      	bne.n	8001986 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8158 	beq.w	8001ce0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d112      	bne.n	8001a68 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b54      	ldr	r3, [pc, #336]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <HAL_RCC_OscConfig+0x938>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_OscConfig+0x938>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x938>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8c4 	bl	8000c0c <HAL_GetTick>
 8001a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f8bf 	bl	8000c0c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e2e9      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_OscConfig+0x938>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ef      	beq.n	8001a8a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x852>
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e02f      	b.n	8001b22 <HAL_RCC_OscConfig+0x8b2>
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x876>
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e01d      	b.n	8001b22 <HAL_RCC_OscConfig+0x8b2>
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d10c      	bne.n	8001b0a <HAL_RCC_OscConfig+0x89a>
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x8b2>
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d06b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f86e 	bl	8000c0c <HAL_GetTick>
 8001b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	e00b      	b.n	8001b4e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff f869 	bl	8000c0c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e291      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 8001b4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b52:	2202      	movs	r2, #2
 8001b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b7c:	601a      	str	r2, [r3, #0]
  return result;
 8001b7e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_OscConfig+0x93c>
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <HAL_RCC_OscConfig+0x930>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x958>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	10908120 	.word	0x10908120
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	4bbb      	ldr	r3, [pc, #748]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bcc:	2102      	movs	r1, #2
 8001bce:	6011      	str	r1, [r2, #0]
 8001bd0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	fa92 f1a2 	rbit	r1, r2
 8001bda:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bde:	6011      	str	r1, [r2, #0]
  return result;
 8001be0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d099      	beq.n	8001b36 <HAL_RCC_OscConfig+0x8c6>
 8001c02:	e063      	b.n	8001ccc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f802 	bl	8000c0c <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fffd 	bl	8000c0c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e225      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 8001c26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c54:	601a      	str	r2, [r3, #0]
  return result;
 8001c56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_OscConfig+0xa06>
 8001c70:	4b90      	ldr	r3, [pc, #576]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	e00d      	b.n	8001c92 <HAL_RCC_OscConfig+0xa22>
 8001c76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c96:	2102      	movs	r1, #2
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fa92 f1a2 	rbit	r1, r2
 8001ca4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ca8:	6011      	str	r1, [r2, #0]
  return result;
 8001caa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1a0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ccc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd4:	4b77      	ldr	r3, [pc, #476]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a76      	ldr	r2, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 81c2 	beq.w	8002070 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f000 819c 	beq.w	8002032 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	f040 8114 	bne.w	8001f2e <HAL_RCC_OscConfig+0xcbe>
 8001d06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d1e:	601a      	str	r2, [r3, #0]
  return result;
 8001d20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	461a      	mov	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ff66 	bl	8000c0c <HAL_GetTick>
 8001d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7fe ff61 	bl	8000c0c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e18b      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 8001d5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d72:	601a      	str	r2, [r3, #0]
  return result;
 8001d74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0xb24>
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e01b      	b.n	8001dcc <HAL_RCC_OscConfig+0xb5c>
 8001d94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fa93 f2a3 	rbit	r2, r3
 8001da8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd4:	6011      	str	r1, [r2, #0]
 8001dd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fa92 f1a2 	rbit	r1, r2
 8001de0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001de4:	6011      	str	r1, [r2, #0]
  return result;
 8001de6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d19e      	bne.n	8001d46 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	4925      	ldr	r1, [pc, #148]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e3c:	601a      	str	r2, [r3, #0]
  return result;
 8001e3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e42:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fed7 	bl	8000c0c <HAL_GetTick>
 8001e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e62:	e009      	b.n	8001e78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe fed2 	bl	8000c0c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0fc      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 8001e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e90:	601a      	str	r2, [r3, #0]
  return result;
 8001e92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xc48>
 8001eac:	4b01      	ldr	r3, [pc, #4]	; (8001eb4 <HAL_RCC_OscConfig+0xc44>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e01e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xc80>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_OscConfig+0xe0c>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	fa92 f1a2 	rbit	r1, r2
 8001f04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f08:	6011      	str	r1, [r2, #0]
  return result;
 8001f0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f002 021f 	and.w	r2, r2, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d09b      	beq.n	8001e64 <HAL_RCC_OscConfig+0xbf4>
 8001f2c:	e0a0      	b.n	8002070 <HAL_RCC_OscConfig+0xe00>
 8001f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	601a      	str	r2, [r3, #0]
  return result;
 8001f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fe52 	bl	8000c0c <HAL_GetTick>
 8001f68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e009      	b.n	8001f82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fe4d 	bl	8000c0c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e077      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
 8001f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	601a      	str	r2, [r3, #0]
  return result;
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_OscConfig+0xd4c>
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_OscConfig+0xe0c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd84>
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCC_OscConfig+0xe0c>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f107 0210 	add.w	r2, r7, #16
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fa92 f1a2 	rbit	r1, r2
 8002008:	f107 020c 	add.w	r2, r7, #12
 800200c:	6011      	str	r1, [r2, #0]
  return result;
 800200e:	f107 020c 	add.w	r2, r7, #12
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d19e      	bne.n	8001f6e <HAL_RCC_OscConfig+0xcfe>
 8002030:	e01e      	b.n	8002070 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_RCC_OscConfig+0xe0c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002048:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800204c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	429a      	cmp	r2, r3
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800205a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800205e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09e      	sub	sp, #120	; 0x78
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e162      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b90      	ldr	r3, [pc, #576]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	498b      	ldr	r1, [pc, #556]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e14a      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	497f      	ldr	r1, [pc, #508]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80dc 	beq.w	80022ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d13c      	bne.n	8002176 <HAL_RCC_ClockConfig+0xf6>
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800210a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_RCC_ClockConfig+0xa6>
 8002120:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	e00f      	b.n	8002146 <HAL_RCC_ClockConfig+0xc6>
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	667b      	str	r3, [r7, #100]	; 0x64
 8002134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002138:	663b      	str	r3, [r7, #96]	; 0x60
 800213a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214a:	65ba      	str	r2, [r7, #88]	; 0x58
 800214c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002156:	fab2 f282 	clz	r2, r2
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f042 0220 	orr.w	r2, r2, #32
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f002 021f 	and.w	r2, r2, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d17b      	bne.n	800226a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0f3      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d13c      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x178>
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800218c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x128>
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_ClockConfig+0x148>
 80021a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d0:	fa92 f2a2 	rbit	r2, r2
 80021d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	f002 021f 	and.w	r2, r2, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d13a      	bne.n	800226a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b2      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1a0>
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e00d      	b.n	800223c <HAL_RCC_ClockConfig+0x1bc>
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2202      	movs	r2, #2
 800223e:	61ba      	str	r2, [r7, #24]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	fa92 f2a2 	rbit	r2, r2
 8002246:	617a      	str	r2, [r7, #20]
  return result;
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	fab2 f282 	clz	r2, r2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e079      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	491a      	ldr	r1, [pc, #104]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fcc6 	bl	8000c0c <HAL_GetTick>
 8002280:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fcc2 	bl	8000c0c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e061      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d214      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4906      	ldr	r1, [pc, #24]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e040      	b.n	800235e <HAL_RCC_ClockConfig+0x2de>
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	491a      	ldr	r1, [pc, #104]	; (8002368 <HAL_RCC_ClockConfig+0x2e8>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x2e8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4912      	ldr	r1, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x2e8>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002322:	f000 f829 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCC_ClockConfig+0x2e8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002330:	22f0      	movs	r2, #240	; 0xf0
 8002332:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	fa92 f2a2 	rbit	r2, r2
 800233a:	60fa      	str	r2, [r7, #12]
  return result;
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	40d3      	lsrs	r3, r2
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x2ec>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	fa21 f303 	lsr.w	r3, r1, r3
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x2f0>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_RCC_ClockConfig+0x2f4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fc14 	bl	8000b84 <HAL_InitTick>
  
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3778      	adds	r7, #120	; 0x78
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	08003724 	.word	0x08003724
 8002370:	200000fc 	.word	0x200000fc
 8002374:	20000100 	.word	0x20000100

08002378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b08b      	sub	sp, #44	; 0x2c
 800237c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x30>
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x36>
 80023a6:	e03c      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_GetSysClockFreq+0xc4>)
 80023aa:	623b      	str	r3, [r7, #32]
      break;
 80023ac:	e03c      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	607a      	str	r2, [r7, #4]
  return result;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	40d3      	lsrs	r3, r2
 80023cc:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	220f      	movs	r2, #15
 80023dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	60fa      	str	r2, [r7, #12]
  return result;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	40d3      	lsrs	r3, r2
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	fbb2 f2f3 	udiv	r2, r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	e004      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	623b      	str	r3, [r7, #32]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002424:	623b      	str	r3, [r7, #32]
      break;
 8002426:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002428:	6a3b      	ldr	r3, [r7, #32]
}
 800242a:	4618      	mov	r0, r3
 800242c:	372c      	adds	r7, #44	; 0x2c
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	0800373c 	.word	0x0800373c
 8002444:	0800374c 	.word	0x0800374c
 8002448:	003d0900 	.word	0x003d0900

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200000fc 	.word	0x200000fc

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800246a:	f7ff ffef 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246e:	4601      	mov	r1, r0
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002478:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800247c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	603a      	str	r2, [r7, #0]
  return result;
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	40d3      	lsrs	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08003734 	.word	0x08003734

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024ae:	f7ff ffcd 	bl	800244c <HAL_RCC_GetHCLKFreq>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	603a      	str	r2, [r7, #0]
  return result;
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	40d3      	lsrs	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08003734 	.word	0x08003734

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b092      	sub	sp, #72	; 0x48
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80d4 	beq.w	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4b4e      	ldr	r3, [pc, #312]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10e      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	61d3      	str	r3, [r2, #28]
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b45      	ldr	r3, [pc, #276]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a41      	ldr	r2, [pc, #260]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fb5b 	bl	8000c0c <HAL_GetTick>
 8002556:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fb57 	bl	8000c0c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e12d      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8084 	beq.w	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002594:	429a      	cmp	r2, r3
 8002596:	d07c      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	2301      	movs	r3, #1
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	2300      	movs	r3, #0
 80025e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d04b      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fb07 	bl	8000c0c <HAL_GetTick>
 80025fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fb03 	bl	8000c0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0d7      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002618:	2302      	movs	r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	2302      	movs	r3, #2
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	61fb      	str	r3, [r7, #28]
  return result;
 8002630:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d108      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002646:	4b01      	ldr	r3, [pc, #4]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	e00d      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	10908100 	.word	0x10908100
 8002658:	2302      	movs	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2202      	movs	r2, #2
 800266a:	613a      	str	r2, [r7, #16]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	60fa      	str	r2, [r7, #12]
  return result;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0b7      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002692:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	494c      	ldr	r1, [pc, #304]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4938      	ldr	r1, [pc, #224]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4930      	ldr	r1, [pc, #192]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f023 0210 	bic.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4929      	ldr	r1, [pc, #164]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	4921      	ldr	r1, [pc, #132]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f023 0220 	bic.w	r2, r3, #32
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	491a      	ldr	r1, [pc, #104]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4912      	ldr	r1, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	490b      	ldr	r1, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3748      	adds	r7, #72	; 0x48
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e040      	b.n	8002868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe f884 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fb9e 	bl	8002f54 <UART_SetConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e022      	b.n	8002868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fd0c 	bl	8003248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fd93 	bl	800338c <UART_CheckIdleState>
 8002866:	4603      	mov	r3, r0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002884:	2b20      	cmp	r3, #32
 8002886:	f040 8082 	bne.w	800298e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_UART_Transmit+0x26>
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07a      	b.n	8002990 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_Transmit+0x38>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e073      	b.n	8002990 <HAL_UART_Transmit+0x120>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028be:	f7fe f9a5 	bl	8000c0c <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Transmit+0x80>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002900:	e02d      	b.n	800295e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fd86 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e039      	b.n	8002990 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800292e:	b292      	uxth	r2, r2
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	3302      	adds	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e008      	b.n	800294c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b292      	uxth	r2, r2
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1cb      	bne.n	8002902 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fd52 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e005      	b.n	8002990 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80ac 	bne.w	8002b0a <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Receive+0x26>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0a4      	b.n	8002b0c <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Receive+0x38>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e09d      	b.n	8002b0c <HAL_UART_Receive+0x174>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ec:	f7fe f90e 	bl	8000c0c <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d10e      	bne.n	8002a2a <HAL_UART_Receive+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_UART_Receive+0x88>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a1e:	e01a      	b.n	8002a56 <HAL_UART_Receive+0xbe>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a28:	e015      	b.n	8002a56 <HAL_UART_Receive+0xbe>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_UART_Receive+0xb6>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_Receive+0xac>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a42:	e008      	b.n	8002a56 <HAL_UART_Receive+0xbe>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	227f      	movs	r2, #127	; 0x7f
 8002a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a4c:	e003      	b.n	8002a56 <HAL_UART_Receive+0xbe>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d108      	bne.n	8002a7a <HAL_UART_Receive+0xe2>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	e003      	b.n	8002a82 <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a8a:	e033      	b.n	8002af4 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2120      	movs	r1, #32
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fcc1 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e032      	b.n	8002b0c <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	8a7b      	ldrh	r3, [r7, #18]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e00d      	b.n	8002ae2 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1c5      	bne.n	8002a8c <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d113      	bne.n	8002b6c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 81cc 	beq.w	8002efa <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
      }
      return;
 8002b6a:	e1c6      	b.n	8002efa <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80e3 	beq.w	8002d3a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <HAL_UART_IRQHandler+0x304>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80d8 	beq.w	8002d3a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xa2>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_UART_IRQHandler+0xce>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_UART_IRQHandler+0xfa>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c04:	f043 0202 	orr.w	r2, r3, #2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	f043 0208 	orr.w	r2, r3, #8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d011      	beq.n	8002c72 <HAL_UART_IRQHandler+0x15e>
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8140 	beq.w	8002efe <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d004      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d031      	beq.n	8002d26 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fc27 	bl	8003516 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d123      	bne.n	8002d1e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_UART_IRQHandler+0x308>)
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f900 	bl	8000f00 <HAL_DMA_Abort_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d10:	4610      	mov	r0, r2
 8002d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00f      	b.n	8002d36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f906 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00b      	b.n	8002d36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f902 	bl	8002f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e007      	b.n	8002d36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8fe 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d34:	e0e3      	b.n	8002efe <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	bf00      	nop
    return;
 8002d38:	e0e1      	b.n	8002efe <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 80a7 	bne.w	8002e92 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80a1 	beq.w	8002e92 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 809b 	beq.w	8002e92 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2210      	movs	r2, #16
 8002d62:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d156      	bne.n	8002e20 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80bf 	beq.w	8002f02 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d8a:	893a      	ldrh	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f080 80b8 	bcs.w	8002f02 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d02a      	beq.n	8002dfa <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f84a 	bl	8000e8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f894 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e14:	e075      	b.n	8002f02 <HAL_UART_IRQHandler+0x3ee>
 8002e16:	bf00      	nop
 8002e18:	04000120 	.word	0x04000120
 8002e1c:	08003575 	.word	0x08003575
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d063      	beq.n	8002f06 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d060      	beq.n	8002f06 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e52:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0210 	bic.w	r2, r2, #16
 8002e84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f856 	bl	8002f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e90:	e039      	b.n	8002f06 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x3a4>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fbf5 	bl	80036a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eb6:	e029      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01a      	beq.n	8002f0a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
    }
    return;
 8002edc:	e015      	b.n	8002f0a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fb54 	bl	80035a0 <UART_EndTransmit_IT>
    return;
 8002ef8:	e008      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8002efa:	bf00      	nop
 8002efc:	e006      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
    return;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_UART_IRQHandler+0x3f8>
    return;
 8002f0a:	bf00      	nop
  }

}
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop

08002f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f82:	f023 030c 	bic.w	r3, r3, #12
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a99      	ldr	r2, [pc, #612]	; (8003234 <UART_SetConfig+0x2e0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d120      	bne.n	8003016 <UART_SetConfig+0xc2>
 8002fd4:	4b98      	ldr	r3, [pc, #608]	; (8003238 <UART_SetConfig+0x2e4>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d817      	bhi.n	8003010 <UART_SetConfig+0xbc>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <UART_SetConfig+0x94>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003005 	.word	0x08003005
 8002ff0:	0800300b 	.word	0x0800300b
 8002ff4:	08002fff 	.word	0x08002fff
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e061      	b.n	80030c2 <UART_SetConfig+0x16e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e05e      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e05b      	b.n	80030c2 <UART_SetConfig+0x16e>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e058      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e055      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a88      	ldr	r2, [pc, #544]	; (800323c <UART_SetConfig+0x2e8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d124      	bne.n	800306a <UART_SetConfig+0x116>
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <UART_SetConfig+0x2e4>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800302c:	d011      	beq.n	8003052 <UART_SetConfig+0xfe>
 800302e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003032:	d817      	bhi.n	8003064 <UART_SetConfig+0x110>
 8003034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003038:	d011      	beq.n	800305e <UART_SetConfig+0x10a>
 800303a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303e:	d811      	bhi.n	8003064 <UART_SetConfig+0x110>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <UART_SetConfig+0xf8>
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d006      	beq.n	8003058 <UART_SetConfig+0x104>
 800304a:	e00b      	b.n	8003064 <UART_SetConfig+0x110>
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e037      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e034      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e031      	b.n	80030c2 <UART_SetConfig+0x16e>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e02e      	b.n	80030c2 <UART_SetConfig+0x16e>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e02b      	b.n	80030c2 <UART_SetConfig+0x16e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a74      	ldr	r2, [pc, #464]	; (8003240 <UART_SetConfig+0x2ec>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d124      	bne.n	80030be <UART_SetConfig+0x16a>
 8003074:	4b70      	ldr	r3, [pc, #448]	; (8003238 <UART_SetConfig+0x2e4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800307c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003080:	d011      	beq.n	80030a6 <UART_SetConfig+0x152>
 8003082:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003086:	d817      	bhi.n	80030b8 <UART_SetConfig+0x164>
 8003088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800308c:	d011      	beq.n	80030b2 <UART_SetConfig+0x15e>
 800308e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003092:	d811      	bhi.n	80030b8 <UART_SetConfig+0x164>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <UART_SetConfig+0x14c>
 8003098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309c:	d006      	beq.n	80030ac <UART_SetConfig+0x158>
 800309e:	e00b      	b.n	80030b8 <UART_SetConfig+0x164>
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e00d      	b.n	80030c2 <UART_SetConfig+0x16e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e00a      	b.n	80030c2 <UART_SetConfig+0x16e>
 80030ac:	2304      	movs	r3, #4
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e007      	b.n	80030c2 <UART_SetConfig+0x16e>
 80030b2:	2308      	movs	r3, #8
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e004      	b.n	80030c2 <UART_SetConfig+0x16e>
 80030b8:	2310      	movs	r3, #16
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e001      	b.n	80030c2 <UART_SetConfig+0x16e>
 80030be:	2310      	movs	r3, #16
 80030c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ca:	d15b      	bne.n	8003184 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d827      	bhi.n	8003122 <UART_SetConfig+0x1ce>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x184>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003105 	.word	0x08003105
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	08003123 	.word	0x08003123
 80030e8:	08003113 	.word	0x08003113
 80030ec:	08003123 	.word	0x08003123
 80030f0:	08003123 	.word	0x08003123
 80030f4:	08003123 	.word	0x08003123
 80030f8:	0800311b 	.word	0x0800311b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7ff f9b2 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8003100:	61b8      	str	r0, [r7, #24]
        break;
 8003102:	e013      	b.n	800312c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff f9d0 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003108:	61b8      	str	r0, [r7, #24]
        break;
 800310a:	e00f      	b.n	800312c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <UART_SetConfig+0x2f0>)
 800310e:	61bb      	str	r3, [r7, #24]
        break;
 8003110:	e00c      	b.n	800312c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7ff f931 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8003116:	61b8      	str	r0, [r7, #24]
        break;
 8003118:	e008      	b.n	800312c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	61bb      	str	r3, [r7, #24]
        break;
 8003120:	e004      	b.n	800312c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	77bb      	strb	r3, [r7, #30]
        break;
 800312a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d074      	beq.n	800321c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	005a      	lsls	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d916      	bls.n	800317e <UART_SetConfig+0x22a>
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003156:	d212      	bcs.n	800317e <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f023 030f 	bic.w	r3, r3, #15
 8003160:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	b29a      	uxth	r2, r3
 800316e:	89fb      	ldrh	r3, [r7, #14]
 8003170:	4313      	orrs	r3, r2
 8003172:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	89fa      	ldrh	r2, [r7, #14]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	e04e      	b.n	800321c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77bb      	strb	r3, [r7, #30]
 8003182:	e04b      	b.n	800321c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	2b08      	cmp	r3, #8
 8003188:	d827      	bhi.n	80031da <UART_SetConfig+0x286>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x23c>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f956 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80031b8:	61b8      	str	r0, [r7, #24]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f974 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 80031c0:	61b8      	str	r0, [r7, #24]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <UART_SetConfig+0x2f0>)
 80031c6:	61bb      	str	r3, [r7, #24]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f8d5 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 80031ce:	61b8      	str	r0, [r7, #24]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	61bb      	str	r3, [r7, #24]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	77bb      	strb	r3, [r7, #30]
        break;
 80031e2:	bf00      	nop
    }

    if (pclk != 0U)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085a      	lsrs	r2, r3, #1
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	441a      	add	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d908      	bls.n	8003218 <UART_SetConfig+0x2c4>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d204      	bcs.n	8003218 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	e001      	b.n	800321c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003228:	7fbb      	ldrb	r3, [r7, #30]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40013800 	.word	0x40013800
 8003238:	40021000 	.word	0x40021000
 800323c:	40004400 	.word	0x40004400
 8003240:	40004800 	.word	0x40004800
 8003244:	007a1200 	.word	0x007a1200

08003248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01a      	beq.n	800335e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003346:	d10a      	bne.n	800335e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800339c:	f7fd fc36 	bl	8000c0c <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10e      	bne.n	80033ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f82d 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e023      	b.n	8003416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d10e      	bne.n	80033fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f817 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00d      	b.n	8003416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342e:	e05e      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d05a      	beq.n	80034ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fd fbe8 	bl	8000c0c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <UART_WaitOnFlagUntilTimeout+0x30>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11b      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800345c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e043      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02c      	beq.n	80034ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a2:	d124      	bne.n	80034ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e00f      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	429a      	cmp	r2, r3
 800350a:	d091      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800352c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0210 	bic.w	r2, r2, #16
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff fcc8 	bl	8002f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fca5 	bl	8002f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e056      	b.n	8003698 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7fd f982 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fc9c 	bl	8002f54 <UART_SetConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e038      	b.n	8003698 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fe0a 	bl	8003248 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003642:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	055b      	lsls	r3, r3, #21
 800365c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003672:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	6979      	ldr	r1, [r7, #20]
 800367c:	430b      	orrs	r3, r1
 800367e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff fe7b 	bl	800338c <UART_CheckIdleState>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	4d0d      	ldr	r5, [pc, #52]	; (80036ec <__libc_init_array+0x38>)
 80036b8:	4c0d      	ldr	r4, [pc, #52]	; (80036f0 <__libc_init_array+0x3c>)
 80036ba:	1b64      	subs	r4, r4, r5
 80036bc:	10a4      	asrs	r4, r4, #2
 80036be:	2600      	movs	r6, #0
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	4d0b      	ldr	r5, [pc, #44]	; (80036f4 <__libc_init_array+0x40>)
 80036c6:	4c0c      	ldr	r4, [pc, #48]	; (80036f8 <__libc_init_array+0x44>)
 80036c8:	f000 f820 	bl	800370c <_init>
 80036cc:	1b64      	subs	r4, r4, r5
 80036ce:	10a4      	asrs	r4, r4, #2
 80036d0:	2600      	movs	r6, #0
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	0800375c 	.word	0x0800375c
 80036f0:	0800375c 	.word	0x0800375c
 80036f4:	0800375c 	.word	0x0800375c
 80036f8:	08003760 	.word	0x08003760

080036fc <memset>:
 80036fc:	4402      	add	r2, r0
 80036fe:	4603      	mov	r3, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
