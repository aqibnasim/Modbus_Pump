
pump_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003adc  08003adc  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08003adc  08003adc  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003adc  08003adc  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08003ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000108  08003bec  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08003bec  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccce  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  0002ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf9d  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37d  00000000  00000000  0004d0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acd85  00000000  00000000  0005947a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001061ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  00106254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a8c 	.word	0x08003a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	08003a8c 	.word	0x08003a8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd22 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f842 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8f4 	bl	80003c0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001d8:	f000 f8d0 	bl	800037c <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80001dc:	f000 f89c 	bl	8000318 <MX_USART3_UART_Init>
//	  WRITE_SINGLE_REG(0x40,0x01,5);

//	 	  	for(int k =0;k<80;k++)
//	 	  		write_reg_map[k]=54;
//	 	  	WRITE_MULTI_REG(0x5B,0x00,0x00,3);
  	  write_reg_map[0]=0;
 80001e0:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <main+0x8c>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
  	  write_reg_map[1]=2;
 80001e6:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <main+0x8c>)
 80001e8:	2202      	movs	r2, #2
 80001ea:	705a      	strb	r2, [r3, #1]
  	  write_reg_map[2]=0x07;
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <main+0x8c>)
 80001ee:	2207      	movs	r2, #7
 80001f0:	709a      	strb	r2, [r3, #2]
  	  write_reg_map[3]=0xD0;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <main+0x8c>)
 80001f4:	22d0      	movs	r2, #208	; 0xd0
 80001f6:	70da      	strb	r2, [r3, #3]
  	WRITE_MULTI_REG(0x40,0x00,0x00,2);
 80001f8:	2302      	movs	r3, #2
 80001fa:	2200      	movs	r2, #0
 80001fc:	2100      	movs	r1, #0
 80001fe:	2040      	movs	r0, #64	; 0x40
 8000200:	f000 fa7a 	bl	80006f8 <WRITE_MULTI_REG>

  	READ_INPUT_REG(0x40,0x01,0x00,0x01);
 8000204:	2301      	movs	r3, #1
 8000206:	2200      	movs	r2, #0
 8000208:	2101      	movs	r1, #1
 800020a:	2040      	movs	r0, #64	; 0x40
 800020c:	f000 f9d8 	bl	80005c0 <READ_INPUT_REG>
  	READ_INPUT_REG(0x40,0x11,0x00,0x01);
 8000210:	2301      	movs	r3, #1
 8000212:	2200      	movs	r2, #0
 8000214:	2111      	movs	r1, #17
 8000216:	2040      	movs	r0, #64	; 0x40
 8000218:	f000 f9d2 	bl	80005c0 <READ_INPUT_REG>

  	READ_INPUT_REG(0x40,0x07,0x00,0x05);
 800021c:	2305      	movs	r3, #5
 800021e:	2200      	movs	r2, #0
 8000220:	2107      	movs	r1, #7
 8000222:	2040      	movs	r0, #64	; 0x40
 8000224:	f000 f9cc 	bl	80005c0 <READ_INPUT_REG>
  	//HAL_Delay(10000);
  	 write_reg_map[0]=0;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <main+0x8c>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
  	  	  write_reg_map[1]=1;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <main+0x8c>)
 8000230:	2201      	movs	r2, #1
 8000232:	705a      	strb	r2, [r3, #1]
  	  	  write_reg_map[2]=0;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <main+0x8c>)
 8000236:	2200      	movs	r2, #0
 8000238:	709a      	strb	r2, [r3, #2]
  	  	  write_reg_map[3]=0;
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <main+0x8c>)
 800023c:	2200      	movs	r2, #0
 800023e:	70da      	strb	r2, [r3, #3]
  	  	WRITE_MULTI_REG(0x40,0x00,0x00,2);
 8000240:	2302      	movs	r3, #2
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	2040      	movs	r0, #64	; 0x40
 8000248:	f000 fa56 	bl	80006f8 <WRITE_MULTI_REG>
 800024c:	2300      	movs	r3, #0
//	 	  	GET_STATE();
//	 	  	CHANGE_STATE(3);
//	 	  	GET_STATE();
  //}
  /* USER CODE END 3 */
}
 800024e:	4618      	mov	r0, r3
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b09e      	sub	sp, #120	; 0x78
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fc08 	bl	8003a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	223c      	movs	r2, #60	; 0x3c
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fbfa 	bl	8003a7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000288:	2301      	movs	r3, #1
 800028a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800028c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000290:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f932 	bl	8001518 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f93b 	bl	8000534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d8:	2101      	movs	r1, #1
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f824 	bl	8002328 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e6:	f000 f925 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <SystemClock_Config+0xbc>)
 80002ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fa4a 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000306:	f000 f915 	bl	8000534 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3778      	adds	r7, #120	; 0x78
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	00020004 	.word	0x00020004

08000318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <MX_USART3_UART_Init+0x60>)
 8000320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000324:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 800032c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000330:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 800033a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART3_UART_Init+0x5c>)
 8000360:	f002 fbc8 	bl	8002af4 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800036a:	f000 f8e3 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200002ac 	.word	0x200002ac
 8000378:	40004800 	.word	0x40004800

0800037c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <MX_USB_PCD_Init+0x40>)
 8000384:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 8000388:	2208      	movs	r2, #8
 800038a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 800038e:	2202      	movs	r2, #2
 8000390:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 8000394:	2202      	movs	r2, #2
 8000396:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_USB_PCD_Init+0x3c>)
 80003a6:	f000 ffd9 	bl	800135c <HAL_PCD_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003b0:	f000 f8c0 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000330 	.word	0x20000330
 80003bc:	40005c00 	.word	0x40005c00

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003d6:	4b53      	ldr	r3, [pc, #332]	; (8000524 <MX_GPIO_Init+0x164>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a52      	ldr	r2, [pc, #328]	; (8000524 <MX_GPIO_Init+0x164>)
 80003dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b50      	ldr	r3, [pc, #320]	; (8000524 <MX_GPIO_Init+0x164>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b4d      	ldr	r3, [pc, #308]	; (8000524 <MX_GPIO_Init+0x164>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a4c      	ldr	r2, [pc, #304]	; (8000524 <MX_GPIO_Init+0x164>)
 80003f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b4a      	ldr	r3, [pc, #296]	; (8000524 <MX_GPIO_Init+0x164>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b47      	ldr	r3, [pc, #284]	; (8000524 <MX_GPIO_Init+0x164>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a46      	ldr	r2, [pc, #280]	; (8000524 <MX_GPIO_Init+0x164>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b44      	ldr	r3, [pc, #272]	; (8000524 <MX_GPIO_Init+0x164>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b41      	ldr	r3, [pc, #260]	; (8000524 <MX_GPIO_Init+0x164>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a40      	ldr	r2, [pc, #256]	; (8000524 <MX_GPIO_Init+0x164>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <MX_GPIO_Init+0x164>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <MX_GPIO_Init+0x164>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a3a      	ldr	r2, [pc, #232]	; (8000524 <MX_GPIO_Init+0x164>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b38      	ldr	r3, [pc, #224]	; (8000524 <MX_GPIO_Init+0x164>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800044e:	2200      	movs	r2, #0
 8000450:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000454:	4834      	ldr	r0, [pc, #208]	; (8000528 <MX_GPIO_Init+0x168>)
 8000456:	f000 ff69 	bl	800132c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 ff62 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000468:	2337      	movs	r3, #55	; 0x37
 800046a:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800046c:	4b2f      	ldr	r3, [pc, #188]	; (800052c <MX_GPIO_Init+0x16c>)
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	482b      	ldr	r0, [pc, #172]	; (8000528 <MX_GPIO_Init+0x168>)
 800047c:	f000 fddc 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000480:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000484:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	4619      	mov	r1, r3
 8000498:	4823      	ldr	r0, [pc, #140]	; (8000528 <MX_GPIO_Init+0x168>)
 800049a:	f000 fdcd 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fdc0 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80004b8:	23e0      	movs	r3, #224	; 0xe0
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004bc:	2302      	movs	r3, #2
 80004be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2303      	movs	r3, #3
 80004c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004c8:	2305      	movs	r3, #5
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fdaf 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 fd9f 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80004fa:	23c0      	movs	r3, #192	; 0xc0
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fe:	2312      	movs	r3, #18
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2301      	movs	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800050a:	2304      	movs	r3, #4
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <MX_GPIO_Init+0x170>)
 8000516:	f000 fd8f 	bl	8001038 <HAL_GPIO_Init>

}
 800051a:	bf00      	nop
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	48001000 	.word	0x48001000
 800052c:	10120000 	.word	0x10120000
 8000530:	48000400 	.word	0x48000400

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>

0800053e <MODBUS_CRC16>:
int8_t write_reg_map[249]={-1};
uint8_t error_map[3]={0};
int status = 0;

static uint16_t MODBUS_CRC16( const unsigned char *buf, unsigned int len )
{
 800053e:	b480      	push	{r7}
 8000540:	b087      	sub	sp, #28
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	82fb      	strh	r3, [r7, #22]
	unsigned int i = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
	char bit = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]

	for( i = 0; i < len; i++ )
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	e026      	b.n	80005aa <MODBUS_CRC16+0x6c>
	{
		crc ^= buf[i];
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b29a      	uxth	r2, r3
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	4053      	eors	r3, r2
 800056a:	82fb      	strh	r3, [r7, #22]

		for( bit = 0; bit < 8; bit++ )
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e015      	b.n	800059e <MODBUS_CRC16+0x60>
		{
			if( crc & 0x0001 )
 8000572:	8afb      	ldrh	r3, [r7, #22]
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00a      	beq.n	8000592 <MODBUS_CRC16+0x54>
			{
				crc >>= 1;
 800057c:	8afb      	ldrh	r3, [r7, #22]
 800057e:	085b      	lsrs	r3, r3, #1
 8000580:	82fb      	strh	r3, [r7, #22]
				crc ^= 0xA001;
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000588:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800058c:	43db      	mvns	r3, r3
 800058e:	82fb      	strh	r3, [r7, #22]
 8000590:	e002      	b.n	8000598 <MODBUS_CRC16+0x5a>
			}
			else
			{
				crc >>= 1;
 8000592:	8afb      	ldrh	r3, [r7, #22]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	82fb      	strh	r3, [r7, #22]
		for( bit = 0; bit < 8; bit++ )
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	d9e6      	bls.n	8000572 <MODBUS_CRC16+0x34>
	for( i = 0; i < len; i++ )
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	3301      	adds	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3d4      	bcc.n	800055c <MODBUS_CRC16+0x1e>
			}
		}
	}

	return crc;
 80005b2:	8afb      	ldrh	r3, [r7, #22]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	371c      	adds	r7, #28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <READ_INPUT_REG>:
		}

}

int READ_INPUT_REG(uint8_t Add_HI,uint8_t Add_LO,uint8_t Num_reg_HI,uint8_t Num_reg_LO)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	4603      	mov	r3, r0
 80005d4:	71bb      	strb	r3, [r7, #6]
 80005d6:	460b      	mov	r3, r1
 80005d8:	717b      	strb	r3, [r7, #5]
 80005da:	4613      	mov	r3, r2
 80005dc:	713b      	strb	r3, [r7, #4]
		uint8_t buff[8] = {SLAVE_ADD,0x04,Add_HI,Add_LO,Num_reg_HI,Num_reg_LO,0,0};
 80005de:	2301      	movs	r3, #1
 80005e0:	743b      	strb	r3, [r7, #16]
 80005e2:	2304      	movs	r3, #4
 80005e4:	747b      	strb	r3, [r7, #17]
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	74bb      	strb	r3, [r7, #18]
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	74fb      	strb	r3, [r7, #19]
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	753b      	strb	r3, [r7, #20]
 80005f2:	793b      	ldrb	r3, [r7, #4]
 80005f4:	757b      	strb	r3, [r7, #21]
 80005f6:	2300      	movs	r3, #0
 80005f8:	75bb      	strb	r3, [r7, #22]
 80005fa:	2300      	movs	r3, #0
 80005fc:	75fb      	strb	r3, [r7, #23]
		//uint8_t buff[8] = {SLAVE_ADD,0x04,0x40,0x00, 0x00,0x23,0xA4,0x13};
		uint16_t crc;
		crc= MODBUS_CRC16(buff,sizeof(buff)-2);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2106      	movs	r1, #6
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff9a 	bl	800053e <MODBUS_CRC16>
 800060a:	4603      	mov	r3, r0
 800060c:	81fb      	strh	r3, [r7, #14]
		buff[7] =  *((uint8_t*)&(crc)+1); //high byte
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	75fb      	strb	r3, [r7, #23]
		buff[6] =  *((uint8_t*)&(crc)+0); //low byte
 8000612:	f107 030e 	add.w	r3, r7, #14
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	75bb      	strb	r3, [r7, #22]
		for(int k =0;k<255;k++)
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
 800061e:	e007      	b.n	8000630 <READ_INPUT_REG+0x70>
			rec_data[k]=0;
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <READ_INPUT_REG+0x12c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		for(int k =0;k<255;k++)
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	3301      	adds	r3, #1
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	2bfe      	cmp	r3, #254	; 0xfe
 8000634:	ddf4      	ble.n	8000620 <READ_INPUT_REG+0x60>
		uint16_t N=((unsigned int)Num_reg_HI << 8) + Num_reg_LO;//{Num_reg_HI|Num_reg_LO};
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	b29b      	uxth	r3, r3
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b29a      	uxth	r2, r3
 800063e:	793b      	ldrb	r3, [r7, #4]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4413      	add	r3, r2
 8000644:	837b      	strh	r3, [r7, #26]


		Send_Data(buff,sizeof(buff));
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2108      	movs	r1, #8
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f97f 	bl	8000950 <Send_Data>
		Receive_data(sizeof(buff)+ 2*N + 3);
 8000652:	8b7b      	ldrh	r3, [r7, #26]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	330b      	adds	r3, #11
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f99e 	bl	80009a0 <Receive_data>
		
		if(rec_data[1] == 0x84)
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <READ_INPUT_REG+0x12c>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	2b84      	cmp	r3, #132	; 0x84
 800066a:	d105      	bne.n	8000678 <READ_INPUT_REG+0xb8>
			{
				error_map[1] = rec_data[2];
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <READ_INPUT_REG+0x12c>)
 800066e:	789a      	ldrb	r2, [r3, #2]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <READ_INPUT_REG+0x130>)
 8000672:	705a      	strb	r2, [r3, #1]
				return 2;
 8000674:	2302      	movs	r3, #2
 8000676:	e034      	b.n	80006e2 <READ_INPUT_REG+0x122>
			}
		if(rec_data[1]==0x04)
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <READ_INPUT_REG+0x12c>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	2b04      	cmp	r3, #4
 800067e:	d12f      	bne.n	80006e0 <READ_INPUT_REG+0x120>
		{
			uint16_t add_full = ((unsigned int)Add_HI << 8) + Add_LO;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	b29b      	uxth	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b29a      	uxth	r2, r3
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	847b      	strh	r3, [r7, #34]	; 0x22
			add_full = add_full - 0x3FE0 ;
 8000690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000692:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8000696:	3b20      	subs	r3, #32
 8000698:	847b      	strh	r3, [r7, #34]	; 0x22

			for(int i=0;i<rec_data[2];i+=2,add_full++)
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	e017      	b.n	80006d0 <READ_INPUT_REG+0x110>
			{
				inp_reg_map[add_full] = ((unsigned int)rec_data[i+3] << 8) + rec_data[i+4];
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	3303      	adds	r3, #3
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <READ_INPUT_REG+0x12c>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b299      	uxth	r1, r3
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <READ_INPUT_REG+0x12c>)
 80006b4:	5cd3      	ldrb	r3, [r2, r3]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006ba:	440a      	add	r2, r1
 80006bc:	b291      	uxth	r1, r2
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <READ_INPUT_REG+0x134>)
 80006c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i=0;i<rec_data[2];i+=2,add_full++)
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	3302      	adds	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006cc:	3301      	adds	r3, #1
 80006ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <READ_INPUT_REG+0x12c>)
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	461a      	mov	r2, r3
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	4293      	cmp	r3, r2
 80006da:	dbe1      	blt.n	80006a0 <READ_INPUT_REG+0xe0>
			}
			return(1);
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <READ_INPUT_REG+0x122>

		}
		else
			{
				return(0);
 80006e0:	2300      	movs	r3, #0
			}
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	372c      	adds	r7, #44	; 0x2c
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000124 	.word	0x20000124
 80006f0:	200002a8 	.word	0x200002a8
 80006f4:	20000224 	.word	0x20000224

080006f8 <WRITE_MULTI_REG>:
	else
		return 2;
}

int WRITE_MULTI_REG(uint8_t Add_HI, uint8_t Add_LO, uint8_t Num_of_reg_HI, uint8_t Num_of_reg_LO)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b0ca      	sub	sp, #296	; 0x128
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4605      	mov	r5, r0
 8000700:	460c      	mov	r4, r1
 8000702:	4610      	mov	r0, r2
 8000704:	4619      	mov	r1, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	462a      	mov	r2, r5
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	1dbb      	adds	r3, r7, #6
 800070e:	4622      	mov	r2, r4
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	1d7b      	adds	r3, r7, #5
 8000714:	4602      	mov	r2, r0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	460a      	mov	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
	for(int k =0;k<255;k++)
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000724:	e00a      	b.n	800073c <WRITE_MULTI_REG+0x44>
	rec_data[k]=0;
 8000726:	4a87      	ldr	r2, [pc, #540]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 8000728:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800072c:	4413      	add	r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	for(int k =0;k<255;k++)
 8000732:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000736:	3301      	adds	r3, #1
 8000738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800073c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000740:	2bfe      	cmp	r3, #254	; 0xfe
 8000742:	ddf0      	ble.n	8000726 <WRITE_MULTI_REG+0x2e>
	uint8_t N =  2 * (((unsigned int)Num_of_reg_HI << 8) + Num_of_reg_LO);
 8000744:	1d7b      	adds	r3, r7, #5
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	021a      	lsls	r2, r3, #8
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t buff[255]={0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	22fb      	movs	r2, #251	; 0xfb
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 f988 	bl	8003a7c <memset>
	buff[0]=SLAVE_ADD;
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
	buff[1]=0x10;
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2210      	movs	r2, #16
 800077a:	705a      	strb	r2, [r3, #1]
	buff[2]=Add_HI;
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	1dfa      	adds	r2, r7, #7
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	709a      	strb	r2, [r3, #2]
	buff[3]=Add_LO;
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	1dba      	adds	r2, r7, #6
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	70da      	strb	r2, [r3, #3]
	buff[4]=Num_of_reg_HI;
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	1d7a      	adds	r2, r7, #5
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	711a      	strb	r2, [r3, #4]
	buff[5]=Num_of_reg_LO;
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	715a      	strb	r2, [r3, #5]
	buff[6]=N;
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80007ac:	719a      	strb	r2, [r3, #6]
	for (int i=7;(i<N+7);i++)
 80007ae:	2307      	movs	r3, #7
 80007b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80007b4:	e011      	b.n	80007da <WRITE_MULTI_REG+0xe2>
	{
		buff[i]=write_reg_map[i-7];
 80007b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ba:	3b07      	subs	r3, #7
 80007bc:	4a62      	ldr	r2, [pc, #392]	; (8000948 <WRITE_MULTI_REG+0x250>)
 80007be:	56d3      	ldrsb	r3, [r2, r3]
 80007c0:	b2d9      	uxtb	r1, r3
 80007c2:	f107 0210 	add.w	r2, r7, #16
 80007c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
	for (int i=7;(i<N+7);i++)
 80007d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007d4:	3301      	adds	r3, #1
 80007d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80007da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007de:	3306      	adds	r3, #6
 80007e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dde6      	ble.n	80007b6 <WRITE_MULTI_REG+0xbe>
	}


	uint16_t crc;
	crc= MODBUS_CRC16(buff,N+7);
 80007e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007ec:	3307      	adds	r3, #7
 80007ee:	461a      	mov	r2, r3
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fea1 	bl	800053e <MODBUS_CRC16>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	f107 030e 	add.w	r3, r7, #14
 8000804:	801a      	strh	r2, [r3, #0]
	buff[N+8] =  *((uint8_t*)&(crc)+1); //high byte
 8000806:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800080a:	3308      	adds	r3, #8
 800080c:	f107 020e 	add.w	r2, r7, #14
 8000810:	7851      	ldrb	r1, [r2, #1]
 8000812:	f107 0210 	add.w	r2, r7, #16
 8000816:	54d1      	strb	r1, [r2, r3]
	buff[N+7] =  *((uint8_t*)&(crc)+0); //low byte
 8000818:	f107 020e 	add.w	r2, r7, #14
 800081c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000820:	3307      	adds	r3, #7
 8000822:	7811      	ldrb	r1, [r2, #0]
 8000824:	f107 0210 	add.w	r2, r7, #16
 8000828:	54d1      	strb	r1, [r2, r3]
	Send_Data(buff,N+9);
 800082a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800082e:	3309      	adds	r3, #9
 8000830:	b2da      	uxtb	r2, r3
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f889 	bl	8000950 <Send_Data>
	Receive_data(sizeof(buff));
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	f000 f8ae 	bl	80009a0 <Receive_data>


		if(rec_data[1] == 0x86)
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	2b86      	cmp	r3, #134	; 0x86
 800084a:	d118      	bne.n	800087e <WRITE_MULTI_REG+0x186>
			{
				error_map[3] = rec_data[2];
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 800084e:	789a      	ldrb	r2, [r3, #2]
 8000850:	4b3e      	ldr	r3, [pc, #248]	; (800094c <WRITE_MULTI_REG+0x254>)
 8000852:	70da      	strb	r2, [r3, #3]
				for(int k =0;k<249;k++)
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800085a:	e00a      	b.n	8000872 <WRITE_MULTI_REG+0x17a>
				write_reg_map[k]=-1;
 800085c:	4a3a      	ldr	r2, [pc, #232]	; (8000948 <WRITE_MULTI_REG+0x250>)
 800085e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000862:	4413      	add	r3, r2
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 8000868:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800086c:	3301      	adds	r3, #1
 800086e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000876:	2bf8      	cmp	r3, #248	; 0xf8
 8000878:	ddf0      	ble.n	800085c <WRITE_MULTI_REG+0x164>
				//free(buff);
				return 2;
 800087a:	2302      	movs	r3, #2
 800087c:	e05d      	b.n	800093a <WRITE_MULTI_REG+0x242>
			}
		if(rec_data[1]==0x10)
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 8000880:	785b      	ldrb	r3, [r3, #1]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d145      	bne.n	8000912 <WRITE_MULTI_REG+0x21a>
		{
			if(rec_data[2]==buff[2]&&rec_data[3]==buff[3]&&rec_data[4]==buff[4]&&rec_data[5]==buff[5])
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 8000888:	789a      	ldrb	r2, [r3, #2]
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	429a      	cmp	r2, r3
 8000892:	d129      	bne.n	80008e8 <WRITE_MULTI_REG+0x1f0>
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 8000896:	78da      	ldrb	r2, [r3, #3]
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	78db      	ldrb	r3, [r3, #3]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d122      	bne.n	80008e8 <WRITE_MULTI_REG+0x1f0>
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 80008a4:	791a      	ldrb	r2, [r3, #4]
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d11b      	bne.n	80008e8 <WRITE_MULTI_REG+0x1f0>
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <WRITE_MULTI_REG+0x24c>)
 80008b2:	795a      	ldrb	r2, [r3, #5]
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d114      	bne.n	80008e8 <WRITE_MULTI_REG+0x1f0>
			{
				for(int k =0;k<249;k++)
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80008c4:	e00a      	b.n	80008dc <WRITE_MULTI_REG+0x1e4>
				write_reg_map[k]=-1;
 80008c6:	4a20      	ldr	r2, [pc, #128]	; (8000948 <WRITE_MULTI_REG+0x250>)
 80008c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008cc:	4413      	add	r3, r2
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 80008d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008d6:	3301      	adds	r3, #1
 80008d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80008dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008e0:	2bf8      	cmp	r3, #248	; 0xf8
 80008e2:	ddf0      	ble.n	80008c6 <WRITE_MULTI_REG+0x1ce>

				return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e028      	b.n	800093a <WRITE_MULTI_REG+0x242>
			}
			else
				{
				for(int k =0;k<249;k++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008ee:	e00a      	b.n	8000906 <WRITE_MULTI_REG+0x20e>
				write_reg_map[k]=-1;
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <WRITE_MULTI_REG+0x250>)
 80008f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008f6:	4413      	add	r3, r2
 80008f8:	22ff      	movs	r2, #255	; 0xff
 80008fa:	701a      	strb	r2, [r3, #0]
				for(int k =0;k<249;k++)
 80008fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000900:	3301      	adds	r3, #1
 8000902:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800090a:	2bf8      	cmp	r3, #248	; 0xf8
 800090c:	ddf0      	ble.n	80008f0 <WRITE_MULTI_REG+0x1f8>

					return 2;
 800090e:	2302      	movs	r3, #2
 8000910:	e013      	b.n	800093a <WRITE_MULTI_REG+0x242>
				}
		}
		else
		{
			for(int k =0;k<249;k++)
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000918:	e00a      	b.n	8000930 <WRITE_MULTI_REG+0x238>
			write_reg_map[k]=-1;
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <WRITE_MULTI_REG+0x250>)
 800091c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000920:	4413      	add	r3, r2
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	701a      	strb	r2, [r3, #0]
			for(int k =0;k<249;k++)
 8000926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800092a:	3301      	adds	r3, #1
 800092c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000930:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000934:	2bf8      	cmp	r3, #248	; 0xf8
 8000936:	ddf0      	ble.n	800091a <WRITE_MULTI_REG+0x222>

			return 2;
 8000938:	2302      	movs	r3, #2
		}
}
 800093a:	4618      	mov	r0, r3
 800093c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000940:	46bd      	mov	sp, r7
 8000942:	bdb0      	pop	{r4, r5, r7, pc}
 8000944:	20000124 	.word	0x20000124
 8000948:	20000000 	.word	0x20000000
 800094c:	200002a8 	.word	0x200002a8

08000950 <Send_Data>:
	current_state = hold_reg_map[1];
	return current_state;
}
	
void Send_Data(uint8_t * buff, uint8_t size)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fce1 	bl	800132c <HAL_GPIO_WritePin>
	HAL_Delay(1);//Silence on channel required for 24ms for baud rate 57600//min silence 2ms
 800096a:	2001      	movs	r0, #1
 800096c:	f000 f9b8 	bl	8000ce0 <HAL_Delay>
	//HAL_UART_Transmit(&huart1,buff, sizeof(buff),500);
	//HAL_UART_Transmit(&huart3,0, size,1000);
	HAL_UART_Transmit(&huart3,buff, size,1000);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	b29a      	uxth	r2, r3
 8000974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <Send_Data+0x4c>)
 800097c:	f002 f908 	bl	8002b90 <HAL_UART_Transmit>
	HAL_Delay(1);//Silence on channel required for 24ms for baud rate 57600//min silence 2ms
 8000980:	2001      	movs	r0, #1
 8000982:	f000 f9ad 	bl	8000ce0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fccc 	bl	800132c <HAL_GPIO_WritePin>
	
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002ac 	.word	0x200002ac

080009a0 <Receive_data>:
	
void Receive_data(uint8_t size)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive (&huart3, rec_data, size , 1000);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	4904      	ldr	r1, [pc, #16]	; (80009c4 <Receive_data+0x24>)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <Receive_data+0x28>)
 80009b6:	f002 f97f 	bl	8002cb8 <HAL_UART_Receive>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000124 	.word	0x20000124
 80009c8:	200002ac 	.word	0x200002ac

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fa60 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d130      	bne.n	8000a98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a84:	f000 fad8 	bl	8001038 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2027      	movs	r0, #39	; 0x27
 8000a8e:	f000 fa26 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a92:	2027      	movs	r0, #39	; 0x27
 8000a94:	f000 fa3f 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004800 	.word	0x40004800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000400 	.word	0x48000400

08000aac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <HAL_PCD_MspInit+0x80>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d129      	bne.n	8000b22 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000af8:	230e      	movs	r3, #14
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fa97 	bl	8001038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000b10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_PCD_MspInit+0x84>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40005c00 	.word	0x40005c00
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f88e 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USART3_IRQHandler+0x10>)
 8000b8e:	f002 f951 	bl	8002e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200002ac 	.word	0x200002ac

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f002 ff21 	bl	8003a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fae9 	bl	80001c8 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000c04:	08003ae4 	.word	0x08003ae4
  ldr r2, =_sbss
 8000c08:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000c0c:	20000620 	.word	0x20000620

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_Init+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_Init+0x28>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f94f 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fecc 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f967 	bl	8000f32 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f92f 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000fc 	.word	0x200000fc
 8000c98:	20000104 	.word	0x20000104
 8000c9c:	20000100 	.word	0x20000100

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000104 	.word	0x20000104
 8000cc4:	2000061c 	.word	0x2000061c

08000cc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000061c 	.word	0x2000061c

08000ce0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000104 	.word	0x20000104

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff29 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff3e 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff31 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa2 	bl	8000e84 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e020      	b.n	8000fb0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 020e 	bic.w	r2, r2, #14
 8000f7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d005      	beq.n	8000fde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e027      	b.n	800102e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020e 	bic.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	4798      	blx	r3
    } 
  }
  return status;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e154      	b.n	80012f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8146 	beq.w	80012ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d00b      	beq.n	8001080 <HAL_GPIO_Init+0x48>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	2b11      	cmp	r3, #17
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b12      	cmp	r3, #18
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0xea>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b12      	cmp	r3, #18
 8001120:	d123      	bne.n	800116a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	6939      	ldr	r1, [r7, #16]
 8001166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0203 	and.w	r2, r3, #3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80a0 	beq.w	80012ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b58      	ldr	r3, [pc, #352]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b55      	ldr	r3, [pc, #340]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c4:	4a53      	ldr	r2, [pc, #332]	; (8001314 <HAL_GPIO_Init+0x2dc>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ee:	d019      	beq.n	8001224 <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_GPIO_Init+0x2e4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a47      	ldr	r2, [pc, #284]	; (8001320 <HAL_GPIO_Init+0x2e8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_GPIO_Init+0x2ec>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1dc>
 8001210:	2304      	movs	r3, #4
 8001212:	e008      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001214:	2305      	movs	r3, #5
 8001216:	e006      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001218:	2303      	movs	r3, #3
 800121a:	e004      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 800121c:	2302      	movs	r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001224:	2300      	movs	r3, #0
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	f002 0203 	and.w	r2, r2, #3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4093      	lsls	r3, r2
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001236:	4937      	ldr	r1, [pc, #220]	; (8001314 <HAL_GPIO_Init+0x2dc>)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_GPIO_Init+0x2f0>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f47f aea3 	bne.w	8001048 <HAL_GPIO_Init+0x10>
  }
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	48000400 	.word	0x48000400
 800131c:	48000800 	.word	0x48000800
 8001320:	48000c00 	.word	0x48000c00
 8001324:	48001000 	.word	0x48001000
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001348:	e002      	b.n	8001350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af06      	add	r7, sp, #24
 8001362:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0d0      	b.n	8001510 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fb92 	bl	8000aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fb10 	bl	80039ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e04c      	b.n	800143a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	3301      	adds	r3, #1
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b298      	uxth	r0, r3
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	3336      	adds	r3, #54	; 0x36
 80013de:	4602      	mov	r2, r0
 80013e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3303      	adds	r3, #3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3338      	adds	r3, #56	; 0x38
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	333c      	adds	r3, #60	; 0x3c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3340      	adds	r3, #64	; 0x40
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3ad      	bcc.n	80013a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e044      	b.n	80014d4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f203 1369 	addw	r3, r3, #361	; 0x169
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3b5      	bcc.n	800144a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	687e      	ldr	r6, [r7, #4]
 80014e6:	466d      	mov	r5, sp
 80014e8:	f106 0410 	add.w	r4, r6, #16
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	1d33      	adds	r3, r6, #4
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f002 fa79 	bl	80039f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800151e:	af00      	add	r7, sp, #0
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	f000 bef4 	b.w	800231a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 816a 	beq.w	8001816 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001542:	4bb3      	ldr	r3, [pc, #716]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d00c      	beq.n	8001568 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154e:	4bb0      	ldr	r3, [pc, #704]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b08      	cmp	r3, #8
 8001558:	d159      	bne.n	800160e <HAL_RCC_OscConfig+0xf6>
 800155a:	4bad      	ldr	r3, [pc, #692]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d152      	bne.n	800160e <HAL_RCC_OscConfig+0xf6>
 8001568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800157c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x82>
 8001594:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0xae>
 800159a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 810c 	beq.w	8001814 <HAL_RCC_OscConfig+0x2fc>
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8106 	bne.w	8001814 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f000 be86 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x110>
 800161a:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7c      	ldr	r2, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e030      	b.n	800168a <HAL_RCC_OscConfig+0x172>
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x134>
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a76      	ldr	r2, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01e      	b.n	800168a <HAL_RCC_OscConfig+0x172>
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001656:	d10c      	bne.n	8001672 <HAL_RCC_OscConfig+0x15a>
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6c      	ldr	r2, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a69      	ldr	r2, [pc, #420]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x172>
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a66      	ldr	r2, [pc, #408]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b64      	ldr	r3, [pc, #400]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a63      	ldr	r2, [pc, #396]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f023 020f 	bic.w	r2, r3, #15
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	495d      	ldr	r1, [pc, #372]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 800169a:	4313      	orrs	r3, r2
 800169c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d059      	beq.n	800175c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb0e 	bl	8000cc8 <HAL_GetTick>
 80016ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb09 	bl	8000cc8 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d902      	bls.n	80016c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f000 be29 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x1e2>
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x20e>
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800170e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001712:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001716:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800172e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001732:	fa92 f2a2 	rbit	r2, r2
 8001736:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800173a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f002 021f 	and.w	r2, r2, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ab      	beq.n	80016b2 <HAL_RCC_OscConfig+0x19a>
 800175a:	e05c      	b.n	8001816 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fab4 	bl	8000cc8 <HAL_GetTick>
 8001760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001766:	f7ff faaf 	bl	8000cc8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d902      	bls.n	800177c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	f000 bdcf 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
 800177c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001780:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001790:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x2c2>
 80017ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_RCC_OscConfig+0x2f8>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017ee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017f2:	fab2 f282 	clz	r2, r2
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	f042 0220 	orr.w	r2, r2, #32
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f002 021f 	and.w	r2, r2, #31
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ab      	bne.n	8001766 <HAL_RCC_OscConfig+0x24e>
 800180e:	e002      	b.n	8001816 <HAL_RCC_OscConfig+0x2fe>
 8001810:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 816f 	beq.w	8001b04 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001826:	4bd0      	ldr	r3, [pc, #832]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001832:	4bcd      	ldr	r3, [pc, #820]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d16c      	bne.n	8001918 <HAL_RCC_OscConfig+0x400>
 800183e:	4bca      	ldr	r3, [pc, #808]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d166      	bne.n	8001918 <HAL_RCC_OscConfig+0x400>
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800185c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x362>
 8001874:	4bbc      	ldr	r3, [pc, #752]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x38a>
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001892:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800189e:	4bb2      	ldr	r3, [pc, #712]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2202      	movs	r2, #2
 80018a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018ac:	fa92 f2a2 	rbit	r2, r2
 80018b0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018b8:	fab2 f282 	clz	r2, r2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f000 bd1b 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4ba0      	ldr	r3, [pc, #640]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	21f8      	movs	r1, #248	; 0xf8
 80018f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018fc:	fa91 f1a1 	rbit	r1, r1
 8001900:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001904:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001908:	fab1 f181 	clz	r1, r1
 800190c:	b2c9      	uxtb	r1, r1
 800190e:	408b      	lsls	r3, r1
 8001910:	4995      	ldr	r1, [pc, #596]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e0f5      	b.n	8001b04 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8085 	beq.w	8001a2e <HAL_RCC_OscConfig+0x516>
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001936:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2301      	movs	r3, #1
 800194e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f9ba 	bl	8000cc8 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff f9b5 	bl	8000cc8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d902      	bls.n	8001970 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	f000 bcd5 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001982:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x488>
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	e013      	b.n	80019c8 <HAL_RCC_OscConfig+0x4b0>
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2202      	movs	r2, #2
 80019ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019d2:	fa92 f2a2 	rbit	r2, r2
 80019d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0af      	beq.n	800195a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	21f8      	movs	r1, #248	; 0xf8
 8001a0a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a12:	fa91 f1a1 	rbit	r1, r1
 8001a16:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a1a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a1e:	fab1 f181 	clz	r1, r1
 8001a22:	b2c9      	uxtb	r1, r1
 8001a24:	408b      	lsls	r3, r1
 8001a26:	4950      	ldr	r1, [pc, #320]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e06a      	b.n	8001b04 <HAL_RCC_OscConfig+0x5ec>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	2300      	movs	r3, #0
 8001a58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f935 	bl	8000cc8 <HAL_GetTick>
 8001a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f930 	bl	8000cc8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d902      	bls.n	8001a7a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f000 bc50 	b.w	800231a <HAL_RCC_OscConfig+0xe02>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x592>
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e013      	b.n	8001ad2 <HAL_RCC_OscConfig+0x5ba>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x650>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ad8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001adc:	fa92 f2a2 	rbit	r2, r2
 8001ae0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ae4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1af      	bne.n	8001a64 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80da 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d069      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x6da>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_OscConfig+0x654>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2301      	movs	r3, #1
 8001b46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f8be 	bl	8000cc8 <HAL_GetTick>
 8001b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b50:	e00e      	b.n	8001b70 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8b9 	bl	8000cc8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d906      	bls.n	8001b70 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e3d9      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	10908120 	.word	0x10908120
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4ba5      	ldr	r3, [pc, #660]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bba:	2102      	movs	r1, #2
 8001bbc:	6019      	str	r1, [r3, #0]
 8001bbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f1a3 	rbit	r1, r3
 8001bc8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bcc:	6019      	str	r1, [r3, #0]
  return result;
 8001bce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0b0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x63a>
 8001bf0:	e06a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x7b0>
 8001bf2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c08:	601a      	str	r2, [r3, #0]
  return result;
 8001c0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c0e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x934>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff f850 	bl	8000cc8 <HAL_GetTick>
 8001c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f84b 	bl	8000cc8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e36b      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8001c42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c92:	2102      	movs	r1, #2
 8001c94:	6019      	str	r1, [r3, #0]
 8001c96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f1a3 	rbit	r1, r3
 8001ca0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ca4:	6019      	str	r1, [r3, #0]
  return result;
 8001ca6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1b2      	bne.n	8001c2e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8158 	beq.w	8001f88 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_OscConfig+0x938>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d11a      	bne.n	8001d52 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x938>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_RCC_OscConfig+0x938>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d28:	f7fe ffce 	bl	8000cc8 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7fe ffc9 	bl	8000cc8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2e9      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_OscConfig+0x938>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ef      	beq.n	8001d32 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x852>
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e02f      	b.n	8001dca <HAL_RCC_OscConfig+0x8b2>
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x876>
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e01d      	b.n	8001dca <HAL_RCC_OscConfig+0x8b2>
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x89a>
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x8b2>
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d06b      	beq.n	8001eac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7fe ff78 	bl	8000cc8 <HAL_GetTick>
 8001dd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe ff73 	bl	8000cc8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e291      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8001df6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f2a3 	rbit	r2, r3
 8001e20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e24:	601a      	str	r2, [r3, #0]
  return result;
 8001e26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d109      	bne.n	8001e54 <HAL_RCC_OscConfig+0x93c>
 8001e40:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <HAL_RCC_OscConfig+0x930>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x958>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	10908120 	.word	0x10908120
 8001e50:	40007000 	.word	0x40007000
 8001e54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e58:	2202      	movs	r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	4bbb      	ldr	r3, [pc, #748]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e74:	2102      	movs	r1, #2
 8001e76:	6011      	str	r1, [r2, #0]
 8001e78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	fa92 f1a2 	rbit	r1, r2
 8001e82:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e86:	6011      	str	r1, [r2, #0]
  return result;
 8001e88:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	fab2 f282 	clz	r2, r2
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f002 021f 	and.w	r2, r2, #31
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d099      	beq.n	8001dde <HAL_RCC_OscConfig+0x8c6>
 8001eaa:	e063      	b.n	8001f74 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7fe ff0c 	bl	8000cc8 <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe ff07 	bl	8000cc8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e225      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8001ece:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0xa06>
 8001f18:	4b90      	ldr	r3, [pc, #576]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	e00d      	b.n	8001f3a <HAL_RCC_OscConfig+0xa22>
 8001f1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	4b89      	ldr	r3, [pc, #548]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f3e:	2102      	movs	r1, #2
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	fa92 f1a2 	rbit	r1, r2
 8001f4c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f50:	6011      	str	r1, [r2, #0]
  return result;
 8001f52:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f002 021f 	and.w	r2, r2, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1a0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b77      	ldr	r3, [pc, #476]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a76      	ldr	r2, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 81c2 	beq.w	8002318 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4b71      	ldr	r3, [pc, #452]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f000 819c 	beq.w	80022da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f040 8114 	bne.w	80021d6 <HAL_RCC_OscConfig+0xcbe>
 8001fae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fc6:	601a      	str	r2, [r3, #0]
  return result;
 8001fc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe70 	bl	8000cc8 <HAL_GetTick>
 8001fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe fe6b 	bl	8000cc8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e18b      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8002002:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002006:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800201a:	601a      	str	r2, [r3, #0]
  return result;
 800201c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002020:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0xb24>
 8002036:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e01b      	b.n	8002074 <HAL_RCC_OscConfig+0xb5c>
 800203c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800205a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002078:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fa92 f1a2 	rbit	r1, r2
 8002088:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800208c:	6011      	str	r1, [r2, #0]
  return result;
 800208e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f042 0220 	orr.w	r2, r2, #32
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f002 021f 	and.w	r2, r2, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d19e      	bne.n	8001fee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e4:	601a      	str	r2, [r3, #0]
  return result;
 80020e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	2301      	movs	r3, #1
 8002100:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fde1 	bl	8000cc8 <HAL_GetTick>
 8002106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210a:	e009      	b.n	8002120 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fddc 	bl	8000cc8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0fc      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 8002120:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002138:	601a      	str	r2, [r3, #0]
  return result;
 800213a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800213e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0xc48>
 8002154:	4b01      	ldr	r3, [pc, #4]	; (800215c <HAL_RCC_OscConfig+0xc44>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e01e      	b.n	8002198 <HAL_RCC_OscConfig+0xc80>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800217e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_OscConfig+0xe0c>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800219c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	fa92 f1a2 	rbit	r1, r2
 80021ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021b0:	6011      	str	r1, [r2, #0]
  return result;
 80021b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f002 021f 	and.w	r2, r2, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d09b      	beq.n	800210c <HAL_RCC_OscConfig+0xbf4>
 80021d4:	e0a0      	b.n	8002318 <HAL_RCC_OscConfig+0xe00>
 80021d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	601a      	str	r2, [r3, #0]
  return result;
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002200:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	461a      	mov	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fd5c 	bl	8000cc8 <HAL_GetTick>
 8002210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	e009      	b.n	800222a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fd57 	bl	8000cc8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e077      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
 800222a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0xd4c>
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_OscConfig+0xe0c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e01b      	b.n	800229c <HAL_RCC_OscConfig+0xd84>
 8002264:	f107 0320 	add.w	r3, r7, #32
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_OscConfig+0xe0c>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f107 0210 	add.w	r2, r7, #16
 80022a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a4:	6011      	str	r1, [r2, #0]
 80022a6:	f107 0210 	add.w	r2, r7, #16
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fa92 f1a2 	rbit	r1, r2
 80022b0:	f107 020c 	add.w	r2, r7, #12
 80022b4:	6011      	str	r1, [r2, #0]
  return result;
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d19e      	bne.n	8002216 <HAL_RCC_OscConfig+0xcfe>
 80022d8:	e01e      	b.n	8002318 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e018      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_RCC_OscConfig+0xe0c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d108      	bne.n	8002314 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002302:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002306:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b09e      	sub	sp, #120	; 0x78
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e162      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b90      	ldr	r3, [pc, #576]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b8d      	ldr	r3, [pc, #564]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	498b      	ldr	r1, [pc, #556]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b89      	ldr	r3, [pc, #548]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e14a      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	497f      	ldr	r1, [pc, #508]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80dc 	beq.w	8002554 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d13c      	bne.n	800241e <HAL_RCC_ClockConfig+0xf6>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_ClockConfig+0xa6>
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e00f      	b.n	80023ee <HAL_RCC_ClockConfig+0xc6>
 80023ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	667b      	str	r3, [r7, #100]	; 0x64
 80023dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e0:	663b      	str	r3, [r7, #96]	; 0x60
 80023e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80023f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023f6:	fa92 f2a2 	rbit	r2, r2
 80023fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f042 0220 	orr.w	r2, r2, #32
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f002 021f 	and.w	r2, r2, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f202 	lsl.w	r2, r1, r2
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d17b      	bne.n	8002512 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0f3      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d13c      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x178>
 8002426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_RCC_ClockConfig+0x128>
 800244a:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	e00f      	b.n	8002470 <HAL_RCC_ClockConfig+0x148>
 8002450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246c:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002474:	63ba      	str	r2, [r7, #56]	; 0x38
 8002476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800247e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d13a      	bne.n	8002512 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b2      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
 80024a0:	2302      	movs	r3, #2
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e00d      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1bc>
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	2302      	movs	r3, #2
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2202      	movs	r2, #2
 80024e6:	61ba      	str	r2, [r7, #24]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	fa92 f2a2 	rbit	r2, r2
 80024ee:	617a      	str	r2, [r7, #20]
  return result;
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f002 021f 	and.w	r2, r2, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e079      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	491a      	ldr	r1, [pc, #104]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe fbd0 	bl	8000cc8 <HAL_GetTick>
 8002528:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe fbcc 	bl	8000cc8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e061      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d214      	bcs.n	800258c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4906      	ldr	r1, [pc, #24]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_ClockConfig+0x25c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e040      	b.n	8002606 <HAL_RCC_ClockConfig+0x2de>
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_ClockConfig+0x2e8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	491a      	ldr	r1, [pc, #104]	; (8002610 <HAL_RCC_ClockConfig+0x2e8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x2e8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x2e8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025ca:	f000 f829 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025ce:	4601      	mov	r1, r0
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d8:	22f0      	movs	r2, #240	; 0xf0
 80025da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	60fa      	str	r2, [r7, #12]
  return result;
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	40d3      	lsrs	r3, r2
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x2ec>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	fa21 f303 	lsr.w	r3, r1, r3
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_RCC_ClockConfig+0x2f0>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_ClockConfig+0x2f4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fb1e 	bl	8000c40 <HAL_InitTick>
  
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3778      	adds	r7, #120	; 0x78
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	08003aa4 	.word	0x08003aa4
 8002618:	200000fc 	.word	0x200000fc
 800261c:	20000100 	.word	0x20000100

08002620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x30>
 800264a:	2b08      	cmp	r3, #8
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x36>
 800264e:	e03c      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002652:	623b      	str	r3, [r7, #32]
      break;
 8002654:	e03c      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800265c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002660:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	607a      	str	r2, [r7, #4]
  return result;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	40d3      	lsrs	r3, r2
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	220f      	movs	r2, #15
 8002684:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	60fa      	str	r2, [r7, #12]
  return result;
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	40d3      	lsrs	r3, r2
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	e004      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	623b      	str	r3, [r7, #32]
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026cc:	623b      	str	r3, [r7, #32]
      break;
 80026ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	372c      	adds	r7, #44	; 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	08003abc 	.word	0x08003abc
 80026ec:	08003acc 	.word	0x08003acc
 80026f0:	003d0900 	.word	0x003d0900

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	200000fc 	.word	0x200000fc

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002712:	f7ff ffef 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002716:	4601      	mov	r1, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002720:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002724:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa92 f2a2 	rbit	r2, r2
 800272c:	603a      	str	r2, [r7, #0]
  return result;
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	fab2 f282 	clz	r2, r2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	40d3      	lsrs	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_RCC_GetPCLK1Freq+0x40>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08003ab4 	.word	0x08003ab4

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002756:	f7ff ffcd 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800275a:	4601      	mov	r1, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002764:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002768:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	603a      	str	r2, [r7, #0]
  return result;
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	fab2 f282 	clz	r2, r2
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	40d3      	lsrs	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x40>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08003ab4 	.word	0x08003ab4

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	; 0x48
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d4 	beq.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	61d3      	str	r3, [r2, #28]
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b45      	ldr	r3, [pc, #276]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fa65 	bl	8000cc8 <HAL_GetTick>
 80027fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fa61 	bl	8000cc8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e169      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800282a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8084 	beq.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283c:	429a      	cmp	r2, r3
 800283e:	d07c      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	461a      	mov	r2, r3
 800286a:	2301      	movs	r3, #1
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002896:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04b      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fa11 	bl	8000cc8 <HAL_GetTick>
 80028a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fa0d 	bl	8000cc8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e113      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	2302      	movs	r3, #2
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
  return result;
 80028d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d108      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028ee:	4b01      	ldr	r3, [pc, #4]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	e00d      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
 80028fc:	10908100 	.word	0x10908100
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2202      	movs	r2, #2
 8002912:	613a      	str	r2, [r7, #16]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fa92 f2a2 	rbit	r2, r2
 800291a:	60fa      	str	r2, [r7, #12]
  return result;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0b7      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	496a      	ldr	r1, [pc, #424]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800294c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296c:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f023 0203 	bic.w	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	495d      	ldr	r1, [pc, #372]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298a:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4956      	ldr	r1, [pc, #344]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002998:	4313      	orrs	r3, r2
 800299a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	494e      	ldr	r1, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4947      	ldr	r1, [pc, #284]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	493f      	ldr	r1, [pc, #252]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 0220 	bic.w	r2, r3, #32
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4938      	ldr	r1, [pc, #224]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a20:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4930      	ldr	r1, [pc, #192]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4921      	ldr	r1, [pc, #132]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	491a      	ldr	r1, [pc, #104]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	4912      	ldr	r1, [pc, #72]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	490b      	ldr	r1, [pc, #44]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3748      	adds	r7, #72	; 0x48
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e040      	b.n	8002b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ff7c 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb9e 	bl	8003274 <UART_SetConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e022      	b.n	8002b88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fd66 	bl	800361c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fded 	bl	8003760 <UART_CheckIdleState>
 8002b86:	4603      	mov	r3, r0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 8082 	bne.w	8002cae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Transmit+0x26>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07a      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Transmit+0x38>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e073      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2221      	movs	r2, #33	; 0x21
 8002bdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bde:	f7fe f873 	bl	8000cc8 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d108      	bne.n	8002c10 <HAL_UART_Transmit+0x80>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	e003      	b.n	8002c18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c20:	e02d      	b.n	8002c7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fde0 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e039      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3302      	adds	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e008      	b.n	8002c6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b292      	uxth	r2, r2
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1cb      	bne.n	8002c22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fdac 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e005      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 80ac 	bne.w	8002e2a <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_UART_Receive+0x26>
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0a4      	b.n	8002e2c <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive+0x38>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e09d      	b.n	8002e2c <HAL_UART_Receive+0x174>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2222      	movs	r2, #34	; 0x22
 8002d04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0c:	f7fd ffdc 	bl	8000cc8 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d10e      	bne.n	8002d4a <HAL_UART_Receive+0x92>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_UART_Receive+0x88>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d3e:	e01a      	b.n	8002d76 <HAL_UART_Receive+0xbe>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	22ff      	movs	r2, #255	; 0xff
 8002d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d48:	e015      	b.n	8002d76 <HAL_UART_Receive+0xbe>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_UART_Receive+0xb6>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_UART_Receive+0xac>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d62:	e008      	b.n	8002d76 <HAL_UART_Receive+0xbe>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	227f      	movs	r2, #127	; 0x7f
 8002d68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6c:	e003      	b.n	8002d76 <HAL_UART_Receive+0xbe>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d7c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d108      	bne.n	8002d9a <HAL_UART_Receive+0xe2>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e003      	b.n	8002da2 <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002daa:	e033      	b.n	8002e14 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2120      	movs	r1, #32
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fd1b 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e032      	b.n	8002e2c <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10c      	bne.n	8002de6 <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	8a7b      	ldrh	r3, [r7, #18]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3302      	adds	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e00d      	b.n	8002e02 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8a7b      	ldrh	r3, [r7, #18]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1c5      	bne.n	8002dac <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 81cc 	beq.w	800321a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
      }
      return;
 8002e8a:	e1c6      	b.n	800321a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80e3 	beq.w	800305a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4ba5      	ldr	r3, [pc, #660]	; (8003138 <HAL_UART_IRQHandler+0x304>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80d8 	beq.w	800305a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_UART_IRQHandler+0xa2>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_UART_IRQHandler+0xce>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_UART_IRQHandler+0xfa>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_UART_IRQHandler+0x15e>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8140 	beq.w	800321e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d004      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d031      	beq.n	8003046 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fc81 	bl	80038ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d123      	bne.n	800303e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003004:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	2b00      	cmp	r3, #0
 800300c:	d013      	beq.n	8003036 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a4a      	ldr	r2, [pc, #296]	; (800313c <HAL_UART_IRQHandler+0x308>)
 8003014:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd ffce 	bl	8000fbc <HAL_DMA_Abort_IT>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003030:	4610      	mov	r0, r2
 8003032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00f      	b.n	8003056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f906 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e00b      	b.n	8003056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f902 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e007      	b.n	8003056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8fe 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003054:	e0e3      	b.n	800321e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003056:	bf00      	nop
    return;
 8003058:	e0e1      	b.n	800321e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 80a7 	bne.w	80031b2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a1 	beq.w	80031b2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 809b 	beq.w	80031b2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d156      	bne.n	8003140 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80bf 	beq.w	8003222 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030aa:	893a      	ldrh	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f080 80b8 	bcs.w	8003222 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	893a      	ldrh	r2, [r7, #8]
 80030b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d02a      	beq.n	800311a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0210 	bic.w	r2, r2, #16
 800310e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ff18 	bl	8000f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003126:	b29b      	uxth	r3, r3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f894 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003134:	e075      	b.n	8003222 <HAL_UART_IRQHandler+0x3ee>
 8003136:	bf00      	nop
 8003138:	04000120 	.word	0x04000120
 800313c:	08003949 	.word	0x08003949
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800314c:	b29b      	uxth	r3, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d060      	beq.n	8003226 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003172:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f856 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031b0:	e039      	b.n	8003226 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_UART_IRQHandler+0x3a4>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fbe8 	bl	80039a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031d6:	e029      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01a      	beq.n	800322a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
    }
    return;
 80031fc:	e015      	b.n	800322a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d011      	beq.n	800322c <HAL_UART_IRQHandler+0x3f8>
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fbae 	bl	8003974 <UART_EndTransmit_IT>
    return;
 8003218:	e008      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
      return;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
    return;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_UART_IRQHandler+0x3f8>
    return;
 800322a:	bf00      	nop
  }

}
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop

08003234 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032a2:	f023 030c 	bic.w	r3, r3, #12
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4aae      	ldr	r2, [pc, #696]	; (80035a8 <UART_SetConfig+0x334>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d120      	bne.n	8003336 <UART_SetConfig+0xc2>
 80032f4:	4bad      	ldr	r3, [pc, #692]	; (80035ac <UART_SetConfig+0x338>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d817      	bhi.n	8003330 <UART_SetConfig+0xbc>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0x94>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	08003325 	.word	0x08003325
 8003310:	0800332b 	.word	0x0800332b
 8003314:	0800331f 	.word	0x0800331f
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e0b5      	b.n	800348a <UART_SetConfig+0x216>
 800331e:	2302      	movs	r3, #2
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e0b2      	b.n	800348a <UART_SetConfig+0x216>
 8003324:	2304      	movs	r3, #4
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e0af      	b.n	800348a <UART_SetConfig+0x216>
 800332a:	2308      	movs	r3, #8
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e0ac      	b.n	800348a <UART_SetConfig+0x216>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e0a9      	b.n	800348a <UART_SetConfig+0x216>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a9d      	ldr	r2, [pc, #628]	; (80035b0 <UART_SetConfig+0x33c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d124      	bne.n	800338a <UART_SetConfig+0x116>
 8003340:	4b9a      	ldr	r3, [pc, #616]	; (80035ac <UART_SetConfig+0x338>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003348:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800334c:	d011      	beq.n	8003372 <UART_SetConfig+0xfe>
 800334e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003352:	d817      	bhi.n	8003384 <UART_SetConfig+0x110>
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003358:	d011      	beq.n	800337e <UART_SetConfig+0x10a>
 800335a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335e:	d811      	bhi.n	8003384 <UART_SetConfig+0x110>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <UART_SetConfig+0xf8>
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d006      	beq.n	8003378 <UART_SetConfig+0x104>
 800336a:	e00b      	b.n	8003384 <UART_SetConfig+0x110>
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e08b      	b.n	800348a <UART_SetConfig+0x216>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e088      	b.n	800348a <UART_SetConfig+0x216>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e085      	b.n	800348a <UART_SetConfig+0x216>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e082      	b.n	800348a <UART_SetConfig+0x216>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e07f      	b.n	800348a <UART_SetConfig+0x216>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a89      	ldr	r2, [pc, #548]	; (80035b4 <UART_SetConfig+0x340>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d124      	bne.n	80033de <UART_SetConfig+0x16a>
 8003394:	4b85      	ldr	r3, [pc, #532]	; (80035ac <UART_SetConfig+0x338>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800339c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a0:	d011      	beq.n	80033c6 <UART_SetConfig+0x152>
 80033a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a6:	d817      	bhi.n	80033d8 <UART_SetConfig+0x164>
 80033a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ac:	d011      	beq.n	80033d2 <UART_SetConfig+0x15e>
 80033ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b2:	d811      	bhi.n	80033d8 <UART_SetConfig+0x164>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <UART_SetConfig+0x14c>
 80033b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x158>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x164>
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e061      	b.n	800348a <UART_SetConfig+0x216>
 80033c6:	2302      	movs	r3, #2
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e05e      	b.n	800348a <UART_SetConfig+0x216>
 80033cc:	2304      	movs	r3, #4
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e05b      	b.n	800348a <UART_SetConfig+0x216>
 80033d2:	2308      	movs	r3, #8
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e058      	b.n	800348a <UART_SetConfig+0x216>
 80033d8:	2310      	movs	r3, #16
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e055      	b.n	800348a <UART_SetConfig+0x216>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <UART_SetConfig+0x344>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d124      	bne.n	8003432 <UART_SetConfig+0x1be>
 80033e8:	4b70      	ldr	r3, [pc, #448]	; (80035ac <UART_SetConfig+0x338>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f4:	d011      	beq.n	800341a <UART_SetConfig+0x1a6>
 80033f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033fa:	d817      	bhi.n	800342c <UART_SetConfig+0x1b8>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003400:	d011      	beq.n	8003426 <UART_SetConfig+0x1b2>
 8003402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003406:	d811      	bhi.n	800342c <UART_SetConfig+0x1b8>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <UART_SetConfig+0x1a0>
 800340c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003410:	d006      	beq.n	8003420 <UART_SetConfig+0x1ac>
 8003412:	e00b      	b.n	800342c <UART_SetConfig+0x1b8>
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e037      	b.n	800348a <UART_SetConfig+0x216>
 800341a:	2302      	movs	r3, #2
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e034      	b.n	800348a <UART_SetConfig+0x216>
 8003420:	2304      	movs	r3, #4
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e031      	b.n	800348a <UART_SetConfig+0x216>
 8003426:	2308      	movs	r3, #8
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e02e      	b.n	800348a <UART_SetConfig+0x216>
 800342c:	2310      	movs	r3, #16
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e02b      	b.n	800348a <UART_SetConfig+0x216>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a61      	ldr	r2, [pc, #388]	; (80035bc <UART_SetConfig+0x348>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d124      	bne.n	8003486 <UART_SetConfig+0x212>
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <UART_SetConfig+0x338>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003448:	d011      	beq.n	800346e <UART_SetConfig+0x1fa>
 800344a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344e:	d817      	bhi.n	8003480 <UART_SetConfig+0x20c>
 8003450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003454:	d011      	beq.n	800347a <UART_SetConfig+0x206>
 8003456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345a:	d811      	bhi.n	8003480 <UART_SetConfig+0x20c>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <UART_SetConfig+0x1f4>
 8003460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003464:	d006      	beq.n	8003474 <UART_SetConfig+0x200>
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x20c>
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e00d      	b.n	800348a <UART_SetConfig+0x216>
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e00a      	b.n	800348a <UART_SetConfig+0x216>
 8003474:	2304      	movs	r3, #4
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e007      	b.n	800348a <UART_SetConfig+0x216>
 800347a:	2308      	movs	r3, #8
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e004      	b.n	800348a <UART_SetConfig+0x216>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e001      	b.n	800348a <UART_SetConfig+0x216>
 8003486:	2310      	movs	r3, #16
 8003488:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d15c      	bne.n	800354e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003494:	7ffb      	ldrb	r3, [r7, #31]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d827      	bhi.n	80034ea <UART_SetConfig+0x276>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x22c>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7ff f922 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 80034c8:	61b8      	str	r0, [r7, #24]
        break;
 80034ca:	e013      	b.n	80034f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7ff f940 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 80034d0:	61b8      	str	r0, [r7, #24]
        break;
 80034d2:	e00f      	b.n	80034f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <UART_SetConfig+0x34c>)
 80034d6:	61bb      	str	r3, [r7, #24]
        break;
 80034d8:	e00c      	b.n	80034f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7ff f8a1 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80034de:	61b8      	str	r0, [r7, #24]
        break;
 80034e0:	e008      	b.n	80034f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	61bb      	str	r3, [r7, #24]
        break;
 80034e8:	e004      	b.n	80034f4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	77bb      	strb	r3, [r7, #30]
        break;
 80034f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8085 	beq.w	8003606 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	005a      	lsls	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d916      	bls.n	8003548 <UART_SetConfig+0x2d4>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d212      	bcs.n	8003548 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f023 030f 	bic.w	r3, r3, #15
 800352a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	b29a      	uxth	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	4313      	orrs	r3, r2
 800353c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	89fa      	ldrh	r2, [r7, #14]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	e05e      	b.n	8003606 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77bb      	strb	r3, [r7, #30]
 800354c:	e05b      	b.n	8003606 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d837      	bhi.n	80035c4 <UART_SetConfig+0x350>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x2e8>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
 8003568:	080035c5 	.word	0x080035c5
 800356c:	08003597 	.word	0x08003597
 8003570:	080035c5 	.word	0x080035c5
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080035c5 	.word	0x080035c5
 800357c:	0800359f 	.word	0x0800359f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff f8c4 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003584:	61b8      	str	r0, [r7, #24]
        break;
 8003586:	e022      	b.n	80035ce <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff f8e2 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e01e      	b.n	80035ce <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <UART_SetConfig+0x34c>)
 8003592:	61bb      	str	r3, [r7, #24]
        break;
 8003594:	e01b      	b.n	80035ce <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7ff f843 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800359a:	61b8      	str	r0, [r7, #24]
        break;
 800359c:	e017      	b.n	80035ce <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	61bb      	str	r3, [r7, #24]
        break;
 80035a4:	e013      	b.n	80035ce <UART_SetConfig+0x35a>
 80035a6:	bf00      	nop
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40004400 	.word	0x40004400
 80035b4:	40004800 	.word	0x40004800
 80035b8:	40004c00 	.word	0x40004c00
 80035bc:	40005000 	.word	0x40005000
 80035c0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	77bb      	strb	r3, [r7, #30]
        break;
 80035cc:	bf00      	nop
    }

    if (pclk != 0U)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	085a      	lsrs	r2, r3, #1
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d908      	bls.n	8003602 <UART_SetConfig+0x38e>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f6:	d204      	bcs.n	8003602 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e001      	b.n	8003606 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003612:	7fbb      	ldrb	r3, [r7, #30]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01a      	beq.n	8003732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371a:	d10a      	bne.n	8003732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003770:	f7fd faaa 	bl	8000cc8 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d10e      	bne.n	80037a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f82d 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e023      	b.n	80037ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d10e      	bne.n	80037ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f817 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e00d      	b.n	80037ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e05e      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d05a      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fa5c 	bl	8000cc8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11b      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003830:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e043      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02c      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	d124      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003890:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d091      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003900:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fc6e 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fc4b 	bl	8003234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039c2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4013      	ands	r3, r2
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039f0:	b084      	sub	sp, #16
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	f107 0014 	add.w	r0, r7, #20
 80039fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	b004      	add	sp, #16
 8003a30:	4770      	bx	lr
	...

08003a34 <__libc_init_array>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	4d0d      	ldr	r5, [pc, #52]	; (8003a6c <__libc_init_array+0x38>)
 8003a38:	4c0d      	ldr	r4, [pc, #52]	; (8003a70 <__libc_init_array+0x3c>)
 8003a3a:	1b64      	subs	r4, r4, r5
 8003a3c:	10a4      	asrs	r4, r4, #2
 8003a3e:	2600      	movs	r6, #0
 8003a40:	42a6      	cmp	r6, r4
 8003a42:	d109      	bne.n	8003a58 <__libc_init_array+0x24>
 8003a44:	4d0b      	ldr	r5, [pc, #44]	; (8003a74 <__libc_init_array+0x40>)
 8003a46:	4c0c      	ldr	r4, [pc, #48]	; (8003a78 <__libc_init_array+0x44>)
 8003a48:	f000 f820 	bl	8003a8c <_init>
 8003a4c:	1b64      	subs	r4, r4, r5
 8003a4e:	10a4      	asrs	r4, r4, #2
 8003a50:	2600      	movs	r6, #0
 8003a52:	42a6      	cmp	r6, r4
 8003a54:	d105      	bne.n	8003a62 <__libc_init_array+0x2e>
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5c:	4798      	blx	r3
 8003a5e:	3601      	adds	r6, #1
 8003a60:	e7ee      	b.n	8003a40 <__libc_init_array+0xc>
 8003a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a66:	4798      	blx	r3
 8003a68:	3601      	adds	r6, #1
 8003a6a:	e7f2      	b.n	8003a52 <__libc_init_array+0x1e>
 8003a6c:	08003adc 	.word	0x08003adc
 8003a70:	08003adc 	.word	0x08003adc
 8003a74:	08003adc 	.word	0x08003adc
 8003a78:	08003ae0 	.word	0x08003ae0

08003a7c <memset>:
 8003a7c:	4402      	add	r2, r0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d100      	bne.n	8003a86 <memset+0xa>
 8003a84:	4770      	bx	lr
 8003a86:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8a:	e7f9      	b.n	8003a80 <memset+0x4>

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
